diff --git a/rsync.man/freebsd_10.1.txt b/rsync.man/macosx_10.10.3.txt
index a3147cb..8ae95d4 100644
--- a/rsync.man/freebsd_10.1.txt
+++ b/rsync.man/macosx_10.10.3.txt
@@ -3,43 +3,36 @@ rsync(1)							      rsync(1)
 
 
 NNAAMMEE
-       rsync - a fast, versatile, remote (and local) file-copying tool
+       rsync - faster, flexible replacement for rcp
 
 SSYYNNOOPPSSIISS
-       Local:  rsync [OPTION...] SRC...	[DEST]
+       rsync [OPTION]... SRC [SRC]... DEST
 
-       Access via remote shell:
-	 Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]
-	 Push: rsync [OPTION...] SRC...	[USER@]HOST:DEST
+       rsync [OPTION]... SRC [SRC]... [USER@]HOST:DEST
 
-       Access via rsync	daemon:
-	 Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST]
-	       rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]
-	 Push: rsync [OPTION...] SRC...	[USER@]HOST::DEST
-	       rsync [OPTION...] SRC...	rsync://[USER@]HOST[:PORT]/DEST
+       rsync [OPTION]... SRC [SRC]... [USER@]HOST::DEST
 
+       rsync [OPTION]... SRC [SRC]... rsync://[USER@]HOST[:PORT]/DEST
 
-       Usages with just	one SRC	arg and	no DEST	arg will list the source files
-       instead of copying.
+       rsync [OPTION]... SRC
+
+       rsync [OPTION]... [USER@]HOST:SRC [DEST]
+
+       rsync [OPTION]... [USER@]HOST::SRC [DEST]
+
+       rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]
 
 
 DDEESSCCRRIIPPTTIIOONN
-       Rsync is	a fast and extraordinarily versatile file  copying  tool.   It
-       can  copy  locally,  to/from  another  host  over  any remote shell, or
-       to/from a remote	rsync daemon.  It offers a  large  number  of  options
-       that  control  every  aspect  of	 its behavior and permit very flexible
-       specification of	the set	of files to be copied.	It is famous  for  its
-       delta-transfer  algorithm,  which  reduces the amount of	data sent over
-       the network by sending only the differences between  the	 source	 files
-       and  the	 existing  files in the	destination.  Rsync is widely used for
-       backups and mirroring and as an improved	copy command for everyday use.
-
-       Rsync  finds  files  that  need to be transferred using a "quick	check"
-       algorithm (by default) that looks for files that	have changed  in  size
-       or   in	last-modified  time.   Any  changes  in	 the  other  preserved
-       attributes (as requested	by options) are	made on	the  destination  file
-       directly	 when  the quick check indicates that the file's data does not
-       need to be updated.
+       rsync is a program that behaves in much the same way that rcp does, but
+       has many more options and uses  the  rsync  remote-update  protocol  to
+       greatly  speed  up  file  transfers  when the destination file is being
+       updated.
+
+       The rsync remote-update protocol allows rsync to transfer just the dif-
+       ferences between two sets of files across the network connection, using
+       an efficient  checksum-search  algorithm  described  in  the  technical
+       report that accompanies this package.
 
        Some of the additional features of rsync are:
 
@@ -85,11 +78,6 @@ GGEENNEERRAALL
        As expected, if neither the source or destination path specify a remote
        host, the copy occurs locally (see also the ----lliisstt--oonnllyy option).
 
-       Rsync refers to the local side as the "client" and the remote  side  as
-       the  "server".  Don't confuse "server" with an rsync daemon -- a	daemon
-       is always a  server,  but  a  server  can  be  either  a	 daemon	 or  a
-       remote-shell spawned process.
-
 
 SSEETTUUPP
        See the file README for installation instructions.
@@ -119,11 +107,8 @@ UUSSAAGGEE
        This would transfer all files matching the pattern *.c from the current
        directory to the directory src on the machine foo. If any of the  files
        already  exist on the remote system then the rsync remote-update proto-
-       col is used to update the file by sending only the differences  in  the
-       data.   Note  that  the expansion of wildcards on the commandline (*.c)
-       into a list of files is handled by the shell before it runs  rsync  and
-       not  by	rsync  itself  (exactly	the same as all	other posix-style pro-
-       grams).
+       col is used to update the file by sending only the differences. See the
+       tech report for details.
 
               rsync -avz foo:src/bar /data/tmp
 
@@ -173,32 +158,34 @@ UUSSAAGGEE
 
 
 AADDVVAANNCCEEDD UUSSAAGGEE
-       The  syntax for requesting multiple files from a	remote host is done by
-       specifying additional remote-host args in the same style	as the	first,
-       or with the hostname omitted.  For instance, all	these work:
+       The syntax for requesting multiple files from a  remote  host  involves
+       using quoted spaces in the SRC.  Some examples:
 
-	      rsync -av	host:file1 :file2 host:file{3,4} /dest/
-	      rsync -av	host::modname/file{1,2}	host::modname/file3 /dest/
-	      rsync -av	host::modname/file1 ::modname/file{3,4}
+              rsync host::'modname/dir1/file1 modname/dir2/file2' /dest
 
 
-       Older  versions	of rsync required using	quoted spaces in the SRC, like
-       these examples:
+       This  would copy file1 and file2 into /dest from an rsync daemon.  Each
+       additional arg must include the same "modname/"  prefix  as  the  first
+       one,  and  must  be  preceded  by a single space.  All other spaces are
+       assumed to be a part of the filenames.
 
               rsync -av host:'dir1/file1 dir2/file2' /dest
-	      rsync host::'modname/dir1/file1 modname/dir2/file2' /dest
 
 
-       This word-splitting still works (by default) in the latest  rsync,  but
-       is not as easy to use as	the first method.
-
-       If  you	need  to transfer a filename that contains whitespace, you can
-       either specify the ----pprrootteecctt--aarrggss (--ss) option, or you'll	need to	escape
-       the  whitespace	in  a  way that	the remote shell will understand.  For
-       instance:
+       This would copy file1 and file2 into /dest using a remote shell.   This
+       word-splitting  is  done  by the remote shell, so if it doesn't work it
+       means that the remote shell isn't configured to split its args based on
+       whitespace  (a  very  rare  setting,  but not unknown).  If you need to
+       transfer a filename that contains whitespace,  you'll  need  to  either
+       escape  the  whitespace in a way that the remote shell will understand,
+       or use wildcards in place of the spaces.  Two examples of this are:
 
               rsync -av host:'file\ name\ with\ spaces' /dest
+              rsync -av host:file?name?with?spaces /dest
+
 
+       This latter example assumes that your shell  passes  through  unmatched
+       wildcards.  If it complains about "no match", put the name in quotes.
 
 
 CCOONNNNEECCTTIINNGG TTOO AANN RRSSYYNNCC DDAAEEMMOONN
@@ -248,37 +235,20 @@ CCOONNNNEECCTTIINNGG TTOO AANN RRSSYYNNCC DDAAEEMMOONN
        web proxy.  Note that your web proxy's configuration must support proxy
        connections to port 873.
 
-       You may also establish a	daemon connection using	a program as  a	 proxy
-       by  setting the environment variable RSYNC_CONNECT_PROG to the commands
-       you wish	to run in place	of making a  direct  socket  connection.   The
-       string  may contain the escape "%H" to represent	the hostname specified
-       in the rsync command (so	use "%%" if you	need  a	 single	 "%"  in  your
-       string).	 For example:
-
-	 export	RSYNC_CONNECT_PROG='ssh	proxyhost nc %H	873'
-	 rsync -av targethost1::module/src/ /dest/
-	 rsync -av rsync:://targethost2/module/src/ /dest/
-
-
-       The command specified above uses	ssh to run nc (netcat) on a proxyhost,
-       which forwards all data to port 873 (the	rsync daemon) on the  targeth-
-       ost (%H).
-
 
 UUSSIINNGG RRSSYYNNCC--DDAAEEMMOONN FFEEAATTUURREESS VVIIAA AA RREEMMOOTTEE--SSHHEELLLL CCOONNNNEECCTTIIOONN
        It is sometimes useful to use various features of an rsync daemon (such
        as named modules) without actually allowing any new socket  connections
-       into   a	  system  (other  than	what  is  already  required  to	 allow
-       remote-shell access).  Rsync supports connecting	 to  a	host  using  a
-       remote  shell  and  then	 spawning  a  single-use  "daemon" server that
-       expects to read its config file in the home dir	of  the	 remote	 user.
-       This  can  be  useful  if you want to encrypt a daemon-style transfer's
-       data, but since the daemon is started up	fresh by the remote user,  you
-       may  not	 be able to use	features such as chroot	or change the uid used
-       by the daemon.  (For another way	to encrypt a daemon transfer, consider
-       using  ssh  to  tunnel a	local port to a	remote machine and configure a
-       normal rsync daemon on that remote host to only allow connections  from
-       "localhost".)
+       into  a  system  (other  than what is already required to allow remote-
+       shell access).  Rsync supports connecting to  a  host  using  a  remote
+       shell  and  then  spawning a single-use "daemon" server that expects to
+       read its config file in the home dir of the remote user.  This  can  be
+       useful if you want to encrypt a daemon-style transfer's data, but since
+       the daemon is started up fresh by the remote user, you may not be  able
+       to  use  features  such as chroot or change the uid used by the daemon.
+       (For another way to encrypt a daemon transfer, consider  using  ssh  to
+       tunnel  a  local  port to a remote machine and configure a normal rsync
+       daemon on that remote host to only allow connections from "localhost".)
 
        From  the user's perspective, a daemon transfer via a remote-shell con-
        nection uses nearly the same command-line syntax as a normal rsync-dae-
@@ -318,19 +288,6 @@ SSTTAARRTTIINNGG AANN RRSSYYNNCC DDAAEEMMOONN TTOO AACC
        there is no need to manually start an rsync daemon.
 
 
-SSOORRTTEEDD TTRRAANNSSFFEERR	OORRDDEERR
-       Rsync always sorts the specified	filenames into its  internal  transfer
-       list.  This handles the merging together	of the contents	of identically
-       named directories, makes	it easy	to remove duplicate filenames, and may
-       confuse	someone	 when  the  files are transferred in a different order
-       than what was given on the command-line.
-
-       If you need a particular	file  to  be  transferred  prior  to  another,
-       either separate the files into different	rsync calls, or	consider using
-       ----ddeellaayy--uuppddaatteess (which doesn't affect the sorted	 transfer  order,  but
-       does make the final file-updating phase happen much more	rapidly).
-
-
 EEXXAAMMPPLLEESS
        Here are some examples of how I use rsync.
 
@@ -370,13 +327,10 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
        to the detailed description below for a complete description.
 
         -v, --verbose               increase verbosity
-	    --info=FLAGS	    fine-grained informational verbosity
-	    --debug=FLAGS	    fine-grained debug verbosity
-	    --msgs2stderr	    special output handling for	debugging
         -q, --quiet                 suppress non-error messages
             --no-motd               suppress daemon-mode MOTD (see caveat)
         -c, --checksum              skip based on checksum, not mod-time & size
-	-a, --archive		    archive mode; equals -rlptgoD (no -H,-A,-X)
+        -a, --archive               archive mode; same as -rlptgoD (no -H)
             --no-OPTION             turn off an implied OPTION (e.g. --no-D)
         -r, --recursive             recurse into directories
         -R, --relative              use relative path names
@@ -387,36 +341,28 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
         -u, --update                skip files that are newer on the receiver
             --inplace               update destination files in-place
             --append                append data onto shorter files
-	    --append-verify	    --append w/old data	in file	checksum
         -d, --dirs                  transfer directories without recursing
         -l, --links                 copy symlinks as symlinks
         -L, --copy-links            transform symlink into referent file/dir
             --copy-unsafe-links     only "unsafe" symlinks are transformed
             --safe-links            ignore symlinks that point outside the tree
-	    --munge-links	    munge symlinks to make them	safer
         -k, --copy-dirlinks         transform symlink to dir into referent dir
         -K, --keep-dirlinks         treat symlinked dir on receiver as dir
         -H, --hard-links            preserve hard links
         -p, --perms                 preserve permissions
-	    --fileflags		    preserve file-flags	(aka chflags)
-	-E, --executability	    preserve executability
+            --executability         preserve executability
             --chmod=CHMOD           affect file and/or directory permissions
-	-A, --acls		    preserve ACLs (implies -p)
-	-X, --xattrs		    preserve extended attributes
         -o, --owner                 preserve owner (super-user only)
         -g, --group                 preserve group
             --devices               preserve device files (super-user only)
             --specials              preserve special files
         -D                          same as --devices --specials
-	-t, --times		    preserve modification times
-	-O, --omit-dir-times	    omit directories from --times
-	-J, --omit-link-times	    omit symlinks from --times
+        -t, --times                 preserve times
+        -O, --omit-dir-times        omit directories when preserving times
             --super                 receiver attempts super-user activities
-	    --fake-super	    store/recover privileged attrs using xattrs
         -S, --sparse                handle sparse files efficiently
-	    --preallocate	    allocate dest files	before writing
-	-n, --dry-run		    perform a trial run	with no	changes	made
-	-W, --whole-file	    copy files whole (w/o delta-xfer algorithm)
+        -n, --dry-run               show what would have been transferred
+        -W, --whole-file            copy files whole (without rsync algorithm)
         -x, --one-file-system       don't cross filesystem boundaries
         -B, --block-size=SIZE       force a fixed checksum block-size
         -e, --rsh=COMMAND           specify the remote shell to use
@@ -426,18 +372,12 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
             --remove-source-files   sender removes synchronized files (non-dir)
             --del                   an alias for --delete-during
             --delete                delete extraneous files from dest dirs
-	    --delete-before	    receiver deletes before xfer, not during
-	    --delete-during	    receiver deletes during the	transfer
-	    --delete-delay	    find deletions during, delete after
-	    --delete-after	    receiver deletes after transfer, not during
+            --delete-before         receiver deletes before transfer (default)
+            --delete-during         receiver deletes during xfer, not before
+            --delete-after          receiver deletes after transfer, not before
             --delete-excluded       also delete excluded files from dest dirs
-	    --ignore-missing-args   ignore missing source args without error
-	    --delete-missing-args   delete missing source args from destination
             --ignore-errors         delete even if there are I/O errors
-	    --force-delete	    force deletion of dirs even	if not empty
-	    --force-change	    affect user/system immutable files/dirs
-	    --force-uchange	    affect user-immutable files/dirs
-	    --force-schange	    affect system-immutable files/dirs
+            --force                 force deletion of dirs even if not empty
             --max-delete=NUM        don't delete more than NUM files
             --max-size=SIZE         don't transfer any file larger than SIZE
             --min-size=SIZE         don't transfer any file smaller than SIZE
@@ -446,11 +386,7 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
             --delay-updates         put all updated files into place at end
         -m, --prune-empty-dirs      prune empty directory chains from file-list
             --numeric-ids           don't map uid/gid values by user/group name
-	    --usermap=STRING	    custom username mapping
-	    --groupmap=STRING	    custom groupname mapping
-	    --chown=USER:GROUP	    simple username/groupname mapping
-	    --timeout=SECONDS	    set	I/O timeout in seconds
-	    --contimeout=SECONDS    set	daemon connection timeout in seconds
+            --timeout=TIME          set I/O timeout in seconds
         -I, --ignore-times          don't skip files that match size and time
             --size-only             skip files that match in size
             --modify-window=NUM     compare mod-times with reduced accuracy
@@ -461,7 +397,6 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
             --link-dest=DIR         hardlink to files in DIR when unchanged
         -z, --compress              compress file data during the transfer
             --compress-level=NUM    explicitly set compression level
-	    --skip-compress=LIST    skip compressing files with	suffix in LIST
         -C, --cvs-exclude           auto-ignore files in the same way CVS does
         -f, --filter=RULE           add a file-filtering RULE
         -F                          same as --filter='dir-merge /.rsync-filter'
@@ -472,33 +407,31 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
             --include-from=FILE     read include patterns from FILE
             --files-from=FILE       read list of source-file names from FILE
         -0, --from0                 all *from/filter files are delimited by 0s
-	-s, --protect-args	    no space-splitting;	wildcard chars only
             --address=ADDRESS       bind address for outgoing socket to daemon
             --port=PORT             specify double-colon alternate port number
             --sockopts=OPTIONS      specify custom TCP options
             --blocking-io           use blocking I/O for the remote shell
-	    --outbuf=N|L|B	    set	out buffering to None, Line, or	Block
             --stats                 give some file-transfer stats
         -8, --8-bit-output          leave high-bit chars unescaped in output
         -h, --human-readable        output numbers in a human-readable format
             --progress              show progress during transfer
         -P                          same as --partial --progress
         -i, --itemize-changes       output a change-summary for all updates
-	-M, --remote-option=OPTION  send OPTION	to the remote side only
             --out-format=FORMAT     output updates using the specified FORMAT
             --log-file=FILE         log what we're doing to the specified FILE
             --log-file-format=FMT   log updates using the specified FMT
-	    --password-file=FILE    read daemon-access password	from FILE
+            --password-file=FILE    read password from FILE
             --list-only             list the files instead of copying them
-	    --bwlimit=RATE	    limit socket I/O bandwidth
+            --bwlimit=KBPS          limit I/O bandwidth; KBytes per second
             --write-batch=FILE      write a batched update to FILE
             --only-write-batch=FILE like --write-batch but w/o updating dest
             --read-batch=FILE       read a batched update from FILE
             --protocol=NUM          force an older protocol version to be used
-	    --iconv=CONVERT_SPEC    request charset conversion of filenames
             --checksum-seed=NUM     set block/file checksum seed (advanced)
         -4, --ipv4                  prefer IPv4
         -6, --ipv6                  prefer IPv6
+        -E, --extended-attributes   copy extended attributes, resource forks
+            --cache                 disable fcntl(F_NOCACHE)
             --version               print version number
        (-h) --help                  show this help (see below for -h comment)
 
@@ -508,9 +441,8 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
 
             --daemon                run as an rsync daemon
             --address=ADDRESS       bind to the specified address
-	    --bwlimit=RATE	    limit socket I/O bandwidth
+            --bwlimit=KBPS          limit I/O bandwidth; KBytes per second
             --config=FILE           specify alternate rsyncd.conf file
-	-M, --dparam=OVERRIDE	    override global daemon config parameter
             --no-detach             do not detach from the parent
             --port=PORT             listen on alternate port number
             --log-file=FILE         override the "log file" setting
@@ -524,18 +456,11 @@ OOPPTTIIOONNSS	SSUUMMMMAARRYY
 
 
 OOPPTTIIOONNSS
-       Rsync  accepts  both long (double-dash +	word) and short	(single-dash +
-       letter) options.	 The full list of the available	options	are  described
-       below.  If an option can	be specified in	more than one way, the choices
-       are comma-separated.  Some options only have  a	long  variant,	not  a
-       short.	If  the	option takes a parameter, the parameter	is only	listed
-       after the long variant, even though it must also	be specified  for  the
-       short.	When  specifying  a  parameter,	 you  can  either use the form
-       --option=param or replace the '=' with whitespace.  The	parameter  may
-       need  to	 be  quoted  in	some manner for	it to survive the shell's com-
-       mand-line parsing.  Keep	in mind	that a leading tilde (~) in a filename
-       is  substituted	by  your  shell, so --option=~/foo will	not change the
-       tilde into your home directory (remove the '=' for that).
+       rsync uses the GNU long options  package.  Many  of  the  command  line
+       options  have  two  variants,  one short and one long.  These are shown
+       below, separated by commas. Some options only have a long variant.  The
+       '='  for  options  that take a parameter is optional; whitespace can be
+       used instead.
 
 
        ----hheellpp Print a short help page  describing  the  options  available  in
@@ -552,127 +477,52 @@ OOPPTTIIOONNSS
               This  option  increases  the amount of information you are given
               during the transfer.  By default, rsync works silently. A single
               --vv  will  give you information about what files are being trans-
-	      ferred and a brief summary at the	end. Two --vv options will  give
+              ferred and a brief summary at the end. Two --vv  flags  will  give
               you  information  on  what  files are being skipped and slightly
-	      more information at the end. More	than  two  --vv  options	should
-	      only be used if you are debugging	rsync.
-
-	      In a modern rsync, the --vv	option is equivalent to	the setting of
-	      groups of	----iinnffoo and ----ddeebbuugg options.  You  can  choose  to  use
-	      these  newer options in addition to, or in place of using	----vveerr--
-	      bboossee, as any fine-grained	settings override the implied settings
-	      of  --vv.  Both ----iinnffoo and ----ddeebbuugg have a way to ask for help that
-	      tells you	exactly	what flags are set for each increase  in  ver-
-	      bosity.
-
-	      However, do keep in mind that a daemon's "max verbosity" setting
-	      will limit how high of a level the various individual flags  can
-	      be  set on the daemon side.  For instance, if the	max is 2, then
-	      any info and/or debug flag that is set to	a  higher  value  than
-	      what  would be set by --vvvv	will be	downgraded to the --vvvv level in
-	      the daemon's logging.
-
-
-       ----iinnffoo==FFLLAAGGSS
-	      This option lets you have	fine-grained control over the informa-
-	      tion  output  you	 want  to see.	An individual flag name	may be
-	      followed by a level number, with 0 meaning to silence that  out-
-	      put,  1  being  the  default  output  level,  and	higher numbers
-	      increasing the output of	that  flag  (for  those	 that  support
-	      higher  levels).	 Use ----iinnffoo==hheellpp to see	all the	available flag
-	      names, what they output, and what	flag names are added for  each
-	      increase in the verbose level.  Some examples:
-
-		  rsync	-a --info=progress2 src/ dest/
-		  rsync	-avv --info=stats2,misc1,flist0	src/ dest/
-
-
-	      Note  that  ----iinnffoo==nnaammee's	output is affected by the ----oouutt--ffoorrmmaatt
-	      and ----iitteemmiizzee--cchhaannggeess (--ii) options.  See those options for  more
-	      information on what is output and	when.
-
-	      This  option was added to	3.1.0, so an older rsync on the	server
-	      side might reject	your attempts at fine-grained control (if  one
-	      or more flags needed to be send to the server and	the server was
-	      too old to understand  them).   See  also	 the  "max  verbosity"
-	      caveat above when	dealing	with a daemon.
-
-
-       ----ddeebbuugg==FFLLAAGGSS
-	      This  option  lets  you have fine-grained	control	over the debug
-	      output you want to see.  An individual flag name may be followed
-	      by  a  level  number,  with  0 meaning to	silence	that output, 1
-	      being the	default	output level, and  higher  numbers  increasing
-	      the  output of that flag (for those that support higher levels).
-	      Use ----ddeebbuugg==hheellpp to see all the available	flag names, what  they
-	      output,  and  what flag names are	added for each increase	in the
-	      verbose level.  Some examples:
-
-		  rsync	-avvv --debug=none src/	dest/
-		  rsync	-avA --del --debug=del2,acl src/ dest/
-
-
-	      Note  that  some	debug  messages	 will  only  be	 output	  when
-	      ----mmssggss22ssttddeerrrr  is	 specified, especially those pertaining	to I/O
-	      and buffer debugging.
-
-	      This option was added to 3.1.0, so an older rsync	on the	server
-	      side  might reject your attempts at fine-grained control (if one
-	      or more flags needed to be send to the server and	the server was
-	      too  old	to  understand	them).	 See  also the "max verbosity"
-	      caveat above when	dealing	with a daemon.
-
-
-       ----mmssggss22ssttddeerrrr
-	      This option changes rsync	to send	all  its  output  directly  to
-	      stderr  rather  than to send messages to the client side via the
-	      protocol (which normally	outputs	 info  messages	 via  stdout).
-	      This is mainly intended for debugging in order to	avoid changing
-	      the data sent via	the protocol, since the	 extra	protocol  data
-	      can  change  what	 is  being tested.  Keep in mind that a	daemon
-	      connection does not have a stderr	channel	to send	messages  back
-	      to  the  client  side,  so  if you are doing any daemon-transfer
-	      debugging	using this option, you should start up a daemon	 using
-	      ----nnoo--ddeettaacchh  so that you can see the stderr output on the	daemon
-	      side.
+              more information at the end. More than two --vv flags should  only
+              be used if you are debugging rsync.
 
-	      This option has the side-effect  of  making  stderr  output  get
-	      line-buffered  so	 that  the merging of the output of 3 programs
-	      happens in a more	readable manner.
+              Note that the names of the transferred files that are output are
+              done using a default ----oouutt--ffoorrmmaatt of  "%n%L",  which  tells  you
+              just  the  name of the file and, if the item is a link, where it
+              points.  At the single --vv level of verbosity, this does not men-
+              tion when a file gets its attributes changed.  If you ask for an
+              itemized list of changed attributes (either ----iitteemmiizzee--cchhaannggeess or
+              adding  "%i"  to  the  ----oouutt--ffoorrmmaatt setting), the output (on the
+              client) increases to mention all items that are changed  in  any
+              way.  See the ----oouutt--ffoorrmmaatt option for more details.
 
 
        --qq,, ----qquuiieett
               This  option  decreases  the amount of information you are given
               during the transfer, notably  suppressing  information  messages
-	      from the remote server. This  option  is	useful	when  invoking
-	      rsync from cron.
+              from  the remote server. This flag is useful when invoking rsync
+              from cron.
 
 
        ----nnoo--mmoottdd
               This option affects the information that is output by the client
-	      at the start of a	daemon transfer.   This	 suppresses  the  mes-
-	      sage-of-the-day  (MOTD)  text,  but  it also affects the list of
-	      modules that the daemon sends in response	to the "rsync  host::"
-	      request  (due  to	 a  limitation in the rsync protocol), so omit
-	      this option if you want to request the list of modules from  the
-	      daemon.
+              at the start of a daemon transfer.  This suppresses the message-
+              of-the-day (MOTD) text, but it also affects the list of  modules
+              that  the daemon sends in response to the "rsync host::" request
+              (due to a limitation in the rsync protocol), so omit this option
+              if you want to request the list of modules from the deamon.
 
 
        --II,, ----iiggnnoorree--ttiimmeess
               Normally  rsync  will  skip  any files that are already the same
-	      size and have the	 same  modification  timestamp.	  This	option
+              size and have the same  modification  time-stamp.   This  option
               turns  off  this "quick check" behavior, causing all files to be
               updated.
 
 
        ----ssiizzee--oonnllyy
-	      This modifies rsync's "quick check" algorithm for	finding	 files
-	      that  need  to  be  transferred, changing	it from	the default of
-	      transferring files with either  a	 changed  size	or  a  changed
-	      last-modified  time  to just looking for files that have changed
-	      in size.	This is	useful when starting to	use rsync after	 using
-	      another  mirroring  system  which	 may  not  preserve timestamps
-	      exactly.
+              Normally rsync will not transfer any files that are already  the
+              same  size  and  have the same modification time-stamp. With the
+              ----ssiizzee--oonnllyy option, files will not be transferred if  they  have
+              the  same  size,  regardless  of  timestamp. This is useful when
+              starting to use rsync after using another mirroring system which
+              may not preserve timestamps exactly.
 
 
        ----mmooddiiffyy--wwiinnddooww
@@ -687,34 +537,23 @@ OOPPTTIIOONNSS
 
 
        --cc,, ----cchheecckkssuumm
-	      This changes the way rsync checks	if the files have been changed
-	      and are in need of a transfer.  Without this option, rsync  uses
-	      a	"quick check" that (by default)	checks if each file's size and
-	      time of last modification	match between the sender and receiver.
-	      This  option changes this	to compare a 128-bit checksum for each
-	      file that	has a matching size.  Generating the  checksums	 means
-	      that  both  sides	 will expend a lot of disk I/O reading all the
-	      data in the files	in the transfer	(and  this  is	prior  to  any
-	      reading  that  will  be done to transfer changed files), so this
-	      can slow things down significantly.
-
-	      The sending side generates its checksums while it	is  doing  the
-	      file-system  scan	 that  builds the list of the available	files.
-	      The receiver generates its checksums when	 it  is	 scanning  for
-	      changed files, and will checksum any file	that has the same size
-	      as the corresponding sender's file:  files with either a changed
-	      size or a	changed	checksum are selected for transfer.
+              This forces the sender to checksum _e_v_e_r_y regular  file  using  a
+              128-bit MD4 checksum.  It does this during the initial file-sys-
+              tem scan as it builds the  list  of  all  available  files.  The
+              receiver  then  checksums its version of each file (if it exists
+              and it has the same size  as  its  sender-side  counterpart)  in
+              order  to  decide  which  files  need  to be updated: files with
+              either a changed size or a changed  checksum  are  selected  for
+              transfer.   Since  this  whole-file checksumming of all files on
+              both sides of the connection occurs in addition to the automatic
+              checksum verifications that occur during a file's transfer, this
+              option can be quite slow.
 
               Note that rsync always verifies that each _t_r_a_n_s_f_e_r_r_e_d  file  was
-	      correctly	reconstructed on the  receiving	 side  by  checking  a
-	      whole-file  checksum  that  is  generated	 as the	file is	trans-
-	      ferred, but that automatic after-the-transfer  verification  has
-	      nothing  to do with this option's	before-the-transfer "Does this
-	      file need	to be updated?"	check.
-
-	      For protocol 30 and  beyond  (first  supported  in  3.0.0),  the
-	      checksum used is MD5.  For older protocols, the checksum used is
-	      MD4.
+              correctly  reconstructed  on  the receiving side by checking its
+              whole-file checksum, but that automatic after-the-transfer veri-
+              fication  has nothing to do with this option's before-the-trans-
+              fer "Does this file need to be updated?" check.
 
 
        --aa,, ----aarrcchhiivvee
@@ -726,8 +565,6 @@ OOPPTTIIOONNSS
 
               Note that --aa ddooeess nnoott pprreesseerrvvee hhaarrddlliinnkkss, because finding multi-
               ply-linked  files is expensive.  You must separately specify --HH.
-	      Note also	that for backward compatibility, --aa currently does nnoott
-	      imply the	----ffiilleeffllaaggss option.
 
 
        --no-OPTION
@@ -755,27 +592,6 @@ OOPPTTIIOONNSS
               This  tells  rsync  to  copy  directories recursively.  See also
               ----ddiirrss (--dd).
 
-	      Beginning	 with rsync 3.0.0, the recursive algorithm used	is now
-	      an incremental scan that uses much less memory than  before  and
-	      begins the transfer after	the scanning of	the first few directo-
-	      ries have	been completed.	 This incremental  scan	 only  affects
-	      our  recursion  algorithm,  and  does not	change a non-recursive
-	      transfer.	 It is also only possible when both ends of the	trans-
-	      fer are at least version 3.0.0.
-
-	      Some  options require rsync to know the full file	list, so these
-	      options disable the incremental recursion	mode.  These  include:
-	      ----ddeelleettee--bbeeffoorree,	  ----ddeelleettee--aafftteerr,    ----pprruunnee--eemmppttyy--ddiirrss,   and
-	      ----ddeellaayy--uuppddaatteess.	Because	of this, the default delete mode  when
-	      you  specify  ----ddeelleettee  is now ----ddeelleettee--dduurriinngg when both ends of
-	      the connection are at least 3.0.0	(use ----ddeell or  ----ddeelleettee--dduurriinngg
-	      to  request  this	 improved deletion mode	explicitly).  See also
-	      the ----ddeelleettee--ddeellaayy option	that is	a  better  choice  than	 using
-	      ----ddeelleettee--aafftteerr.
-
-	      Incremental  recursion can be disabled using the ----nnoo--iinncc--rreeccuurr--
-	      ssiivvee option or its shorter ----nnoo--ii--rr alias.
-
 
        --RR,, ----rreellaattiivvee
               Use relative paths. This means that the full path  names  speci-
@@ -794,41 +610,28 @@ OOPPTTIIOONNSS
 
 
               then  a  file  named  /tmp/foo/bar/baz.c would be created on the
-	      remote machine, preserving its full path.	 These extra path ele-
-	      ments  are  called "implied directories" (i.e. the "foo" and the
-	      "foo/bar"	directories in the above example).
-
-	      Beginning	with rsync 3.0.0, rsync	 always	 sends	these  implied
-	      directories as real directories in the file list,	even if	a path
-	      element is really	a symlink on the sending side.	This  prevents
-	      some really unexpected behaviors when copying the	full path of a
-	      file that	you didn't realize had a symlink in its	path.  If  you
-	      want  to	duplicate a server-side	symlink, include both the sym-
-	      link via its path, and referent directory	via its	real path.  If
-	      you're  dealing with an older rsync on the sending side, you may
-	      need to use the ----nnoo--iimmpplliieedd--ddiirrss	option.
-
-	      It is also possible to limit the amount of path information that
-	      is  sent as implied directories for each path you	specify.  With
-	      a	modern rsync on	the sending side (beginning with  2.6.7),  you
-	      can insert a dot and a slash into	the source path, like this:
+              remote machine -- the full path name is preserved.  To limit the
+              amount  of  path  information  that  is  sent, you have a couple
+              options:  (1) With a modern rsync on the sending side (beginning
+              with  2.6.7),  you  can insert a dot and a slash into the source
+              path, like this:
 
                  rsync -avR /foo/./bar/baz.c remote:/tmp/
 
 
               That would create /tmp/bar/baz.c on the remote  machine.   (Note
               that  the dot must be followed by a slash, so "/foo/." would not
-	      be  abbreviated.)	  For  older rsync versions, you would need to
-	      use a chdir to limit the source path.  For example, when pushing
-	      files:
+              be abbreviated.)  (2) For older rsync versions, you  would  need
+              to  use  a  chdir  to  limit the source path.  For example, when
+              pushing files:
 
                  (cd /foo; rsync -avR bar/baz.c remote:/tmp/)
 
 
               (Note that the parens put the two commands into a sub-shell,  so
               that  the  "cd" command doesn't remain in effect for future com-
-	      mands.)	If  you're pulling files from an older rsync, use this
-	      idiom (but only for a non-daemon transfer):
+              mands.)  If you're pulling files, use this idiom (which  doesn't
+              work with an rsync daemon):
 
                  rsync -avR --rsync-path="cd /foo; rsync" \
                      remote:bar/baz.c /tmp/
@@ -843,8 +646,8 @@ OOPPTTIIOONNSS
               destination  system  are  left  unchanged if they exist, and any
               missing implied directories are created with default attributes.
               This even allows these implied path elements to have big differ-
-	      ences,  such  as being a symlink to a directory on the receiving
-	      side.
+              ences, such as being a symlink to a directory on one side of the
+              transfer, and a real directory on the other side.
 
               For  instance,  if a command-line arg or a files-from entry told
               rsync to transfer  the  file  "path/foo/file",  the  directories
@@ -859,10 +662,17 @@ OOPPTTIIOONNSS
               ----kkeeeepp--ddiirrlliinnkkss  option  (which  will  also  affect  symlinks to
               directories in the rest of the transfer).
 
-	      When  pulling files from an rsync	older than 3.0.0, you may need
-	      to use this option if the	sending	side has a symlink in the path
-	      you  request  and	 you wish the implied directories to be	trans-
-	      ferred as	normal directories.
+              In  a  similar  but  opposite  scenario,  if  the  transfer   of
+              "path/foo/file"  is requested and "path/foo" is a symlink on the
+              sending side,  running  without  ----nnoo--iimmpplliieedd--ddiirrss  would  cause
+              rsync  to  transform  "path/foo"  on  the receiving side into an
+              identical symlink, and then attempt to transfer "path/foo/file",
+              which  might  fail  if the duplicated symlink did not point to a
+              directory on the receiving side.   Another  way  to  avoid  this
+              sending  of  a  symlink  as  an  implied  directory  is  to  use
+              ----ccooppyy--uunnssaaffee--lliinnkkss, or  ----ccooppyy--ddiirrlliinnkkss  (both  of  which  also
+              affect  symlinks  in  the  rest  of  the  transfer  -- see their
+              descriptions for full details).
 
 
        --bb,, ----bbaacckkuupp
@@ -875,7 +685,7 @@ OOPPTTIIOONNSS
               ----oommiitt--ddiirr--ttiimmeess option will be implied, and (2) if ----ddeelleettee  is
               also  in  effect  (without  ----ddeelleettee--eexxcclluuddeedd), rsync will add a
               "protect" filter-rule for the backup suffix to the  end  of  all
-	      your existing excludes (e.g. --ff ""PP **~~"").	This will prevent pre-
+              your existing excludes (e.g. -f "P *~").  This will prevent pre-
               viously backed-up files from being deleted.  Note  that  if  you
               are  supplying  your  own filter rules, you may need to manually
               insert your own exclude/protect rule somewhere higher up in  the
@@ -892,13 +702,6 @@ OOPPTTIIOONNSS
               erwise  the files backed up in the specified directory will keep
               their original filenames).
 
-	      Note that	if you specify a relative path,	the  backup  directory
-	      will  be	relative to the	destination directory, so you probably
-	      want to specify either an	absolute path or a  path  that	starts
-	      with  "../".  If an rsync	daemon is the receiver,	the backup dir
-	      cannot go	outside	the module's path  hierarchy,  so  take	 extra
-	      care not to delete it or copy into it.
-
 
        ----ssuuffffiixx==SSUUFFFFIIXX
               This option allows you to override  the  default  backup  suffix
@@ -909,103 +712,58 @@ OOPPTTIIOONNSS
        --uu,, ----uuppddaattee
               This  forces rsync to skip any files which exist on the destina-
               tion and have a modified time that  is  newer  than  the  source
-	      file.  (If an existing destination file has a modification  time
-	      equal  to	the source file's, it will be updated if the sizes are
-	      different.)
-
-	      Note that	this does not affect the copying of dirs, symlinks, or
-	      other  special files.  Also, a difference	of file	format between
-	      the sender and receiver is always	 considered  to	 be  important
-	      enough for an update, no matter what date	is on the objects.  In
-	      other words, if the source has a directory where the destination
-	      has  a  file,  the  transfer would occur regardless of the time-
-	      stamps.
+              file.   (If an existing destination file has a modify time equal
+              to the source file's, it will be updated if the sizes  are  dif-
+              ferent.)
 
-	      This option is a transfer	rule, not an exclude,  so  it  doesn't
-	      affect  the  data	 that  goes  into  the file-lists, and thus it
-	      doesn't affect deletions.	 It just limits	 the  files  that  the
-	      receiver requests	to be transferred.
+              In  the current implementation of ----uuppddaattee, a difference of file
+              format between the sender and receiver is always  considered  to
+              be important enough for an update, no matter what date is on the
+              objects.  In other words, if the source has  a  directory  or  a
+              symlink  where  the  destination  has a file, the transfer would
+              occur regardless of the timestamps.  This might  change  in  the
+              future  (feel free to comment on this on the mailing list if you
+              have an opinion).
 
 
        ----iinnppllaaccee
-	      This  option  changes  how  rsync	transfers a file when its data
-	      needs to be updated: instead of the default method of creating a
-	      new  copy	 of  the file and moving it into place when it is com-
-	      plete, rsync instead writes the updated  data  directly  to  the
-	      destination file.
-
-	      This has several effects:
-
-
-	      o	     Hard  links are not broken.  This means the new data will
-		     be	visible	through	other hard links  to  the  destination
-		     file.   Moreover, attempts	to copy	differing source files
-		     onto a multiply-linked destination	file will result in  a
-		     "tug  of war" with	the destination	data changing back and
-		     forth.
-
-	      o	     In-use binaries cannot be updated	(either	 the  OS  will
-		     prevent  this from	happening, or binaries that attempt to
-		     swap-in their data	will misbehave or crash).
-
-	      o	     The file's	data will be in	an inconsistent	 state	during
-		     the transfer and will be left that	way if the transfer is
-		     interrupted or if an update fails.
-
-	      o	     A file that rsync cannot  write  to  cannot  be  updated.
-		     While  a  super  user  can	update any file, a normal user
-		     needs to be granted write permission for the open of  the
-		     file for writing to be successful.
-
-	      o	     The efficiency of rsync's delta-transfer algorithm	may be
-		     reduced if	some data in the destination file is overwrit-
-		     ten  before  it  can be copied to a position later	in the
-		     file.  This does not apply	if  you	 use  ----bbaacckkuupp,	 since
-		     rsync is smart enough to use the backup file as the basis
-		     file for the transfer.
-
-
-	      WARNING: you should not use this option to update	files that are
-	      being  accessed  by  others,  so be careful when choosing	to use
-	      this for a copy.
+              This causes rsync not to create a new copy of the file and  then
+              move  it  into place.  Instead rsync will overwrite the existing
+              file, meaning that the rsync algorithm can't accomplish the full
+              amount of network reduction it might be able to otherwise (since
+              it does not yet try to sort data  matches).   One  exception  to
+              this  is if you combine the option with ----bbaacckkuupp, since rsync is
+              smart enough to use the backup file as the basis  file  for  the
+              transfer.
 
-	      This  option  is	useful	for  transferring  large  files	  with
-	      block-based  changes  or appended	data, and also on systems that
-	      are disk bound, not network bound.  It  can  also	 help  keep  a
-	      copy-on-write filesystem snapshot	from diverging the entire con-
-	      tents of a file that only	has minor changes.
+              This  option  is  useful for transfer of large files with block-
+              based changes or appended data, and also  on  systems  that  are
+              disk bound, not network bound.
 
               The option implies ----ppaarrttiiaall (since an interrupted transfer does
               not delete the  file),  but  conflicts  with  ----ppaarrttiiaall--ddiirr  and
               ----ddeellaayy--uuppddaatteess.  Prior to rsync 2.6.4 ----iinnppllaaccee was also incom-
               patible with ----ccoommppaarree--ddeesstt and ----lliinnkk--ddeesstt.
 
+              WARNING: The file's data will be in an inconsistent state during
+              the transfer (and possibly afterward if the transfer gets inter-
+              rupted), so you should not use this option to update files  that
+              are  in  use.   Also  note that rsync will be unable to update a
+              file in-place that is not writable by the receiving user.
+
 
        ----aappppeenndd
               This causes rsync to update a file by appending  data  onto  the
               end  of  the  file,  which  presumes  that the data that already
               exists on the receiving side is identical with the start of  the
-	      file on the sending side.	 If a file needs to be transferred and
-	      its  size	on the receiver	is the same or longer than the size on
-	      the sender, the file is skipped.	This does not  interfere  with
-	      the  updating  of	 a file's non-content attributes (e.g. permis-
-	      sions, ownership,	etc.) when the file does not need to be	trans-
-	      ferred,  nor  does  it  affect  the  updating of any non-regular
-	      files.  Implies ----iinnppllaaccee, but does not conflict	with  ----ssppaarrssee
-	      (since it	is always extending a file's length).
-
-
-       ----aappppeenndd--vveerriiffyy
-	      This  works just like the	----aappppeenndd option, but the existing data
-	      on the receiving side is included	in the full-file checksum ver-
-	      ification	 step,	which  will  cause  a file to be resent	if the
-	      final verification step fails (rsync uses	a normal,  non-append-
-	      ing ----iinnppllaaccee transfer for the resend).
-
-	      Note:  prior  to	rsync  3.0.0,  the ----aappppeenndd option worked like
-	      ----aappppeenndd--vveerriiffyy, so if you are interacting with an  older	 rsync
-	      (or  the	transfer  is using a protocol prior to 30), specifying
-	      either append option will	initiate an ----aappppeenndd--vveerriiffyy  transfer.
+              file  on  the  sending side.  If that is not true, the file will
+              fail the  checksum  test,  and  the  resend  will  do  a  normal
+              ----iinnppllaaccee  update to correct the mismatched data.  Only files on
+              the receiving side that are shorter than the corresponding  file
+              on  the  sending  side (as well as new files) are sent.  Implies
+              ----iinnppllaaccee, but does  not  conflict  with  ----ssppaarrssee  (though  the
+              ----ssppaarrssee  option  will  be  auto-disabled  if  a  resend  of the
+              already-existing data is required).
 
 
        --dd,, ----ddiirrss
@@ -1018,17 +776,6 @@ OOPPTTIIOONNSS
               one).  If you specify both ----ddiirrss and  ----rreeccuurrssiivvee,  ----rreeccuurrssiivvee
               takes precedence.
 
-	      The ----ddiirrss option	is implied by the ----ffiilleess--ffrroomm option  or  the
-	      ----lliisstt--oonnllyy  option  (including an implied ----lliisstt--oonnllyy usage) if
-	      ----rreeccuurrssiivvee wasn't specified (so that directories	 are  seen  in
-	      the listing).  Specify ----nnoo--ddiirrss (or ----nnoo--dd) if you want to turn
-	      this off.
-
-	      There is also a backward-compatibility helper option, ----oolldd--ddiirrss
-	      (or   ----oolldd--dd)   that   tells   rsync  to	 use  a	 hack  of  "-r
-	      --exclude='/*/*'"	to get an older	rsync to list a	single	direc-
-	      tory without recursing.
-
 
        --ll,, ----lliinnkkss
               When  symlinks are encountered, recreate the symlink on the des-
@@ -1062,32 +809,7 @@ OOPPTTIIOONNSS
               pected results.
 
 
-       ----mmuunnggee--lliinnkkss
-	      This  option  tells  rsync  to  (1)  modify  all symlinks	on the
-	      receiving	side in	a way that makes them unusable but recoverable
-	      (see below), or (2) to unmunge symlinks on the sending side that
-	      had been stored in a munged state.  This is useful if you	 don't
-	      quite  trust the source of the data to not try to	slip in	a sym-
-	      link to a	unexpected place.
-
-	      The way rsync disables the use of	symlinks is to prefix each one
-	      with the string "/rsyncd-munged/".  This prevents	the links from
-	      being used as long as that directory does	not exist.  When  this
-	      option  is  enabled,  rsync will refuse to run if	that path is a
-	      directory	or a symlink to	a directory.
-
-	      The option only affects the client side of the transfer,	so  if
-	      you   need   it	to   affect   the   server,   specify  it  via
-	      ----rreemmoottee--ooppttiioonn.	(Note that in a	 local	transfer,  the	client
-	      side is the sender.)
-
-	      This  option has no affect on a daemon, since the	daemon config-
-	      ures whether it wants munged symlinks via	its  "munge  symlinks"
-	      parameter.   See	also  the  "munge-symlinks" perl script	in the
-	      support directory	of the source code.
-
-
-       --kk,, ----ccooppyy--ddiirrlliinnkkss
+       --KK,, ----ccooppyy--ddiirrlliinnkkss
               This  option  causes  the  sending  side to treat a symlink to a
               directory as though it were a real directory.  This is useful if
               you  don't  want  symlinks to non-directories to be affected, as
@@ -1096,26 +818,12 @@ OOPPTTIIOONNSS
               Without this option, if the sending side has replaced  a  direc-
               tory  with  a  symlink  to  a directory, the receiving side will
               delete anything that is in the way of the new symlink, including
-	      a	directory hierarchy (as	long as	----ffoorrccee--ddeelleettee or ----ddeelleettee  is
-	      in effect).
+              a  directory  hierarchy  (as  long  as ----ffoorrccee or ----ddeelleettee is in
+              effect).
 
               See also ----kkeeeepp--ddiirrlliinnkkss for an analogous option for the receiv-
               ing side.
 
-	      ----ccooppyy--ddiirrlliinnkkss applies to all symlinks to  directories  in  the
-	      source.	If you want to follow only a few specified symlinks, a
-	      trick you	can use	is to pass them	as additional source args with
-	      a	 trailing  slash,  using ----rreellaattiivvee to make the	paths match up
-	      right.  For example:
-
-	      rsync -r --relative src/./ src/./follow-me/ dest/
-
-
-	      This works because rsync calls llssttaatt(2) on  the  source  arg  as
-	      given, and the trailing slash makes llssttaatt(2) follow the symlink,
-	      giving rise to a directory in the	file-list which	overrides  the
-	      symlink found during the scan of "src/./".
-
 
        --KK,, ----kkeeeepp--ddiirrlliinnkkss
               This  option  causes  the receiving side to treat a symlink to a
@@ -1131,64 +839,18 @@ OOPPTTIIOONNSS
               file into the new directory.  With ----kkeeeepp--ddiirrlliinnkkss, the receiver
               keeps the symlink and "file" ends up in "bar".
 
-	      One note of caution:  if you use ----kkeeeepp--ddiirrlliinnkkss,	you must trust
-	      all  the	symlinks  in  the  copy!   If  it  is  possible	for an
-	      untrusted	user to	create their own symlink to any	directory, the
-	      user  could then (on a subsequent	copy) replace the symlink with
-	      a	real directory and affect the content  of  whatever  directory
-	      the  symlink  references.	 For backup copies, you	are better off
-	      using something like a bind mount	instead	of a symlink to	modify
-	      your receiving hierarchy.
-
               See also ----ccooppyy--ddiirrlliinnkkss for an analogous option for the sending
               side.
 
 
        --HH,, ----hhaarrdd--lliinnkkss
-	      This tells rsync to look for hard-linked files in	the source and
-	      link together the	corresponding files on the destination.	 With-
-	      out this option, hard-linked files in the	source are treated  as
-	      though they were separate	files.
-
-	      This option does NOT necessarily ensure that the pattern of hard
-	      links on the destination exactly matches	that  on  the  source.
-	      Cases  in	which the destination may end up with extra hard links
-	      include the following:
-
-
-	      o	     If	the destination	contains extraneous  hard-links	 (more
-		     linking  than  what  is present in	the source file	list),
-		     the copying algorithm will	 not  break  them  explicitly.
-		     However, if one or	more of	the paths have content differ-
-		     ences, the	normal file-update process  will  break	 those
-		     extra  links (unless you are using	the ----iinnppllaaccee option).
-
-	      o	     If	you specify a ----lliinnkk--ddeesstt directory that contains hard
-		     links,  the  linking of the destination files against the
-		     ----lliinnkk--ddeesstt files can cause some paths in the destination
-		     to	become linked together due to the ----lliinnkk--ddeesstt associa-
-		     tions.
-
-
-	      Note that	rsync can only detect hard links  between  files  that
-	      are  inside  the transfer	set.  If rsync updates a file that has
-	      extra hard-link connections to files outside the transfer,  that
-	      linkage will be broken.  If you are tempted to use the ----iinnppllaaccee
-	      option to	avoid this breakage, be	very careful that you know how
-	      your  files  are	being  updated so that you are certain that no
-	      unintended changes happen	due to lingering hard links  (and  see
-	      the ----iinnppllaaccee option for more caveats).
-
-	      If  incremental recursion	is active (see ----rreeccuurrssiivvee), rsync may
-	      transfer a missing hard-linked file before it finds that another
-	      link  for	that contents exists elsewhere in the hierarchy.  This
-	      does not affect the accuracy of the transfer (i.e.  which	 files
-	      are hard-linked together), just its efficiency (i.e. copying the
-	      data for a new, early copy of a hard-linked file that could have
-	      been  found  later  in  the  transfer  in	 another member	of the
-	      hard-linked set of files).  One way to avoid  this  inefficiency
-	      is to disable incremental	recursion using	the ----nnoo--iinncc--rreeccuurrssiivvee
-	      option.
+              This  tells  rsync to look for hard-linked files in the transfer
+              and link together the corresponding files on the receiving side.
+              Without  this  option,  hard-linked  files  in  the transfer are
+              treated as though they were separate files.
+
+              Note that rsync can only detect hard links if both parts of  the
+              link are in the list of files being sent.
 
 
        --pp,, ----ppeerrmmss
@@ -1205,13 +867,10 @@ OOPPTTIIOONNSS
                      might change just the execute permission for the file.
 
               o      New files get their "normal" permission bits set  to  the
-		     source  file's  permissions  masked  with	the  receiving
-		     directory's  default  permissions	(either	 the receiving
-		     process's umask, or the  permissions  specified  via  the
-		     destination  directory's  default ACL), and their special
-		     permission	bits disabled except in	the case where	a  new
-		     directory	inherits  a  setgid bit	from its parent	direc-
-		     tory.
+                     source file's permissions masked with the receiving end's
+                     umask setting, and their special permission bits disabled
+                     except  in the case where a new directory inherits a set-
+                     gid bit from its parent directory.
 
 
               Thus,  when  ----ppeerrmmss  and  ----eexxeeccuuttaabbiilliittyy  are  both  disabled,
@@ -1225,40 +884,37 @@ OOPPTTIIOONNSS
               ----cchhmmoodd==uuggoo==rrwwXX (which ensures  that  all  non-masked  bits  get
               enabled).   If you'd care to make this latter behavior easier to
               type, you could define a popt alias for it, such as putting this
-	      line  in	the file ~/.popt (the following	defines	the --ZZ option,
-	      and includes --no-g to use the default group of the  destination
+              line  in  the  file  ~/.popt  (this  defines  the --ss option, and
+              includes --no-g to use the  default  group  of  the  destination
               dir):
 
-		 rsync alias -Z	--no-p --no-g --chmod=ugo=rwX
+                 rsync alias -s --no-p --no-g --chmod=ugo=rwX
 
 
               You  could  then  use  this new option in a command such as this
               one:
 
-		 rsync -avZ src/ dest/
+                 rsync -asv src/ dest/
 
 
-	      (Caveat: make sure that --aa  does	not  follow  --ZZ,  or  it  will
-	      re-enable	the two	"--no-*" options mentioned above.)
+              (Caveat: make sure that --aa does not follow --ss, or  it  will  re-
+              enable the "--no-*" options.)
 
               The  preservation  of the destination's setgid bit on newly-cre-
               ated directories when ----ppeerrmmss is off was added in  rsync  2.6.7.
               Older  rsync  versions  erroneously  preserved the three special
               permission bits for newly-created files when  ----ppeerrmmss  was  off,
               while  overriding  the  destination's  setgid  bit  setting on a
-	      newly-created directory.	Default	ACL observance	was  added  to
-	      the  ACL	patch  for  rsync 2.6.7, so older (or non-ACL-enabled)
-	      rsyncs use the umask even	if default ACLs	are present.  (Keep in
-	      mind  that it is the version of the receiving rsync that affects
-	      these behaviors.)
-
-
-       --EE,, ----eexxeeccuuttaabbiilliittyy
-	      This option causes  rsync	 to  preserve  the  executability  (or
-	      non-executability) of regular files when ----ppeerrmmss is not enabled.
-	      A	regular	file is	considered to be executable if	at  least  one
-	      'x'  is turned on	in its permissions.  When an existing destina-
-	      tion file's executability	differs	from that of the corresponding
+              newly-created directory.  (Keep in mind that it is  the  version
+              of the receiving rsync that affects this behavior.)
+
+
+       ----eexxeeccuuttaabbiilliittyy
+              This  option causes rsync to preserve the executability (or non-
+              executability) of regular files when ----ppeerrmmss is not enabled.   A
+              regular  file is considered to be executable if at least one 'x'
+              is turned on in its permissions.  When an  existing  destination
+              file's  executability  differs  from  that  of the corresponding
               source file, rsync modifies the destination  file's  permissions
               as follows:
 
@@ -1273,67 +929,10 @@ OOPPTTIIOONNSS
               If ----ppeerrmmss is enabled, this option is ignored.
 
 
-       --AA,, ----aaccllss
-	      This  option  causes  rsync to update the	destination ACLs to be
-	      the same as the source ACLs.  The	option also implies ----ppeerrmmss.
-
-	      The source and destination  systems  must	 have  compatible  ACL
-	      entries  for this	option to work properly.  See the ----ffaakkee--ssuuppeerr
-	      option for a way to backup and restore ACLs that are not compat-
-	      ible.
-
-
-       --XX,, ----xxaattttrrss
-	      This  option  causes  rsync  to  update the destination extended
-	      attributes to be the same	as the source ones.
-
-	      For systems that support extended-attribute namespaces,  a  copy
-	      being  done  by  a  super-user copies all	namespaces except sys-
-	      tem.*.  A	normal user only copies	the user.* namespace.	To  be
-	      able to backup and restore non-user namespaces as	a normal user,
-	      see the ----ffaakkee--ssuuppeerr option.
-
-	      Note that	this option does not copy rsyncs special xattr	values
-	      (e.g.  those  used by ----ffaakkee--ssuuppeerr) unless you repeat the	option
-	      (e.g. -XX).  This	"copy all xattrs" mode	cannot	be  used  with
-	      ----ffaakkee--ssuuppeerr.
-
-
-       ----ffiilleeffllaaggss
-	      This option causes rsync to update the file-flags	to be the same
-	      as the source files and directories (if  your  OS	 supports  the
-	      cchhffllaaggss(2) system	call).	 Some flags can	only be	altered	by the
-	      super-user  and  some  might  only  be  unset  below  a  certain
-	      secure-level  (usually single-user mode).	It will	not make files
-	      alterable	that are set to	immutable  on  the  receiver.	To  do
-	      that,  see ----ffoorrccee--cchhaannggee, ----ffoorrccee--uucchhaannggee, and ----ffoorrccee--sscchhaannggee.
-
-
-       ----ffoorrccee--cchhaannggee
-	      This option causes rsync to disable both user-immutable and sys-
-	      tem-immutable  flags  on	files  and  directories	that are being
-	      updated or deleted on the	receiving side.	 This option overrides
-	      ----ffoorrccee--uucchhaannggee and ----ffoorrccee--sscchhaannggee.
-
-
-       ----ffoorrccee--uucchhaannggee
-	      This  option  causes  rsync  to  disable user-immutable flags on
-	      files and	directories that are being updated or deleted  on  the
-	      receiving	 side.	 It does not try to affect system flags.  This
-	      option overrides ----ffoorrccee--cchhaannggee and ----ffoorrccee--sscchhaannggee.
-
-
-       ----ffoorrccee--sscchhaannggee
-	      This option causes rsync to disable  system-immutable  flags  on
-	      files  and  directories that are being updated or	deleted	on the
-	      receiving	side.  It does not try to  affect  user	 flags.	  This
-	      option overrides ----ffoorrccee--cchhaannggee and ----ffoorrccee--uucchhaannggee.
-
-
        ----cchhmmoodd
               This option tells rsync to apply  one  or  more  comma-separated
-	      "chmod" modes to the permission of the files  in	the  transfer.
-	      The resulting value is treated as	though it were the permissions
+              "chmod"  strings to the permission of the files in the transfer.
+              The resulting value is treated as though it was the  permissions
               that  the  sending  side supplied for the file, which means that
               this option can seem to have no  effect  on  existing  files  if
               ----ppeerrmmss is not enabled.
@@ -1342,19 +941,11 @@ OOPPTTIIOONNSS
               cchhmmoodd(1) manpage, you can specify an item that should only apply
               to  a  directory  by prefixing it with a 'D', or specify an item
               that should only apply to a file by prefixing  it  with  a  'F'.
-	      For example, the following will ensure that all directories  get
-	      marked  set-gid, that no files are other-writable, that both are
-	      user-writable and	group-writable,	and that both have  consistent
-	      executability across all bits:
+              For example:
 
               --chmod=Dg+s,ug+w,Fo-w,+X
 
 
-	      Using octal mode numbers is also allowed:
-
-	      --chmod=D2775,F664
-
-
               It  is  also  legal to specify multiple ----cchhmmoodd options, as each
               additional option is just appended to the  list  of  changes  to
               make.
@@ -1368,8 +959,8 @@ OOPPTTIIOONNSS
               This  option  causes  rsync  to set the owner of the destination
               file to be the same as the source file, but only if the  receiv-
               ing  rsync  is being run as the super-user (see also the ----ssuuppeerr
-	      and ----ffaakkee--ssuuppeerr options).  Without this option,	the  owner  of
-	      new and/or transferred files are set to the invoking user	on the
+              option to force rsync to attempt super-user activities).   With-
+              out  this  option,  the owner is set to the invoking user on the
               receiving side.
 
               The preservation of ownership will associate matching  names  by
@@ -1397,7 +988,7 @@ OOPPTTIIOONNSS
               This option causes rsync to transfer character and block  device
               files  to  the  remote  system  to recreate these devices.  This
               option has no effect if the receiving rsync is not  run  as  the
-	      super-user (see also the ----ssuuppeerr and ----ffaakkee--ssuuppeerr	options).
+              super-user and ----ssuuppeerr is not specified.
 
 
        ----ssppeecciiaallss
@@ -1414,10 +1005,9 @@ OOPPTTIIOONNSS
               option is not used, the optimization that  excludes  files  that
               have  not  been  modified cannot be effective; in other words, a
               missing --tt or --aa will cause the next transfer to behave as if it
-	      used  --II,	 causing  all  files  to  be  updated  (though rsync's
-	      delta-transfer algorithm will make the update  fairly  efficient
-	      if  the  files  haven't actually changed,	you're much better off
-	      using --tt).
+              used --II, causing all files to be updated (though the rsync algo-
+              rithm will make the update fairly efficient if the files haven't
+              actually changed, you're much better off using --tt).
 
 
        --OO,, ----oommiitt--ddiirr--ttiimmeess
@@ -1426,23 +1016,6 @@ OOPPTTIIOONNSS
               on the receiving side, it is a good idea to use --OO.  This option
               is inferred if you use ----bbaacckkuupp without ----bbaacckkuupp--ddiirr.
 
-	      This  option also	has the	side-effect of avoiding	early creation
-	      of directories in	incremental  recursion	copies.	  The  default
-	      ----iinncc--rreeccuurrssiivvee  copying	normally  does an early-create pass of
-	      all the sub-directories in a parent directory in order for it to
-	      be  able	to  then  set  the modify time of the parent directory
-	      right away (without having to delay that until a bunch of	recur-
-	      sive copying has finished).  This	early-create idiom is not nec-
-	      essary if	directory modify times are not being preserved,	so  it
-	      is  skipped.  Since early-create directories don't have accurate
-	      mode, mtime, or ownership, the use of this option	can help  when
-	      someone wants to avoid these partially-finished directories.
-
-
-       --JJ,, ----oommiitt--lliinnkk--ttiimmeess
-	      This  tells rsync	to omit	symlinks when it is preserving modifi-
-	      cation times (see	----ttiimmeess).
-
 
        ----ssuuppeerr
               This tells the receiving side to attempt  super-user  activities
@@ -1452,95 +1025,34 @@ OOPPTTIIOONNSS
               the ----ggrroouuppss option,  and  copying  devices  via  the  ----ddeevviicceess
               option.   This  is useful for systems that allow such activities
               without being the super-user, and also  for  ensuring  that  you
-	      will  get	 errors	 if  the receiving side	isn't being run	as the
+              will get errors if the receiving side isn't being running as the
               super-user.  To turn off super-user activities,  the  super-user
               can use ----nnoo--ssuuppeerr.
 
 
-       ----ffaakkee--ssuuppeerr
-	      When  this option	is enabled, rsync simulates super-user activi-
-	      ties by saving/restoring the privileged attributes  via  special
-	      extended	attributes that	are attached to	each file (as needed).
-	      This includes the	file's owner and  group	 (if  it  is  not  the
-	      default),	 the  file's  device  info (device & special files are
-	      created as empty text files), and	any permission	bits  that  we
-	      won't allow to be	set on the real	file (e.g.  the	real file gets
-	      u-s,g-s,o-t for safety) or that would limit the  owner's	access
-	      (since  the real super-user can always access/change a file, the
-	      files we create can always be accessed/changed by	 the  creating
-	      user).   This option also	handles	ACLs (if ----aaccllss	was specified)
-	      and non-user extended attributes (if ----xxaattttrrss was	specified).
-
-	      This is a	good way to backup data	without	 using	a  super-user,
-	      and to store ACLs	from incompatible systems.
-
-	      The  ----ffaakkee--ssuuppeerr	 option	only affects the side where the	option
-	      is used.	To affect the remote side of  a	 remote-shell  connec-
-	      tion, use	the ----rreemmoottee--ooppttiioonn (--MM) option:
-
-		rsync -av -M--fake-super /src/ host:/dest/
-
-
-	      For  a  local  copy, this	option affects both the	source and the
-	      destination.  If you wish	a local	copy  to  enable  this	option
-	      just  for	the destination	files, specify --MM----ffaakkee--ssuuppeerr.	If you
-	      wish a local copy	to enable this	option	just  for  the	source
-	      files, combine ----ffaakkee--ssuuppeerr with --MM----ssuuppeerr.
-
-	      This option is overridden	by both	----ssuuppeerr	and ----nnoo--ssuuppeerr.
-
-	      See  also	 the  "fake super" setting in the daemon's rsyncd.conf
-	      file.
-
-
        --SS,, ----ssppaarrssee
               Try  to  handle  sparse  files  efficiently so they take up less
               space on the destination.  Conflicts with ----iinnppllaaccee because it's
               not possible to overwrite data in a sparse fashion.
 
-
-       ----pprreeaallllooccaattee
-	      This tells the receiver to allocate each destination file	to its
-	      eventual	size before writing data to the	file.  Rsync will only
-	      use the real filesystem-level preallocation support provided  by
-	      Linux's ffaallllooccaattee(2) system call or Cygwin's ppoossiixx__ffaallllooccaattee(3),
-	      not the slow glibc implementation	that writes a zero  byte  into
-	      each block.
-
-	      Without this option, larger files	may not	be entirely contiguous
-	      on the filesystem, but with this option rsync will probably copy
-	      more  slowly.   If  the  destination is not an extent-supporting
-	      filesystem (such as ext4,	xfs, NTFS, etc.), this option may have
-	      no positive effect at all.
+              NOTE:  Don't  use  this option when the destination is a Solaris
+              "tmpfs" filesystem. It doesn't seem to handle  seeks  over  null
+              regions correctly and ends up corrupting the files.
 
 
        --nn,, ----ddrryy--rruunn
-	      This  makes  rsync  perform  a  trial  run that doesn't make any
-	      changes (and produces mostly the same output as a	real run).  It
-	      is  most	commonly  used	in  combination	with the --vv,, ----vveerrbboossee
-	      and/or --ii,, ----iitteemmiizzee--cchhaannggeess options to see what an  rsync  com-
-	      mand is going to do before one actually runs it.
-
-	      The  output  of  ----iitteemmiizzee--cchhaannggeess is supposed to	be exactly the
-	      same on a	dry run	and a subsequent real run (barring intentional
-	      trickery	and  system call failures); if it isn't, that's	a bug.
-	      Other output should be mostly unchanged, but may differ in  some
-	      areas.   Notably,	 a  dry	 run does not send the actual data for
-	      file transfers, so ----pprrooggrreessss has	no effect, the	"bytes	sent",
-	      "bytes  received", "literal data", and "matched data" statistics
-	      are too small, and the "speedup" value is	equivalent  to	a  run
-	      where no file transfers were needed.
+              This  tells  rsync to not do any file transfers, instead it will
+              just report the actions it would have taken.
 
 
        --WW,, ----wwhhoollee--ffiillee
-	      With  this  option  rsync's delta-transfer algorithm is not used
-	      and the whole file is sent as-is instead.	 The transfer  may  be
+              With this option the incremental rsync algorithm is not used and
+              the  whole  file  is  sent  as-is  instead.  The transfer may be
               faster if this option is used when  the  bandwidth  between  the
               source  and destination machines is higher than the bandwidth to
               disk  (especially  when  the  "disk"  is  actually  a  networked
               filesystem).   This is the default when both the source and des-
-	      tination	 are   specified  as  local  paths,  but  only	if  no
-	      batch-writing option is in effect.
+              tination are specified as local paths.
 
 
        --xx,, ----oonnee--ffiillee--ssyysstteemm
@@ -1568,56 +1080,21 @@ OOPPTTIIOONNSS
               This  tells rsync to skip creating files (including directories)
               that do not exist yet on the destination.   If  this  option  is
               combined  with  the  ----iiggnnoorree--eexxiissttiinngg  option, no files will be
-	      updated (which can be useful if all you want  to	do  is	delete
+              updated (which can be useful if all you want to do is to  delete
               extraneous files).
 
-	      This  option  is	a transfer rule, not an	exclude, so it doesn't
-	      affect the data that goes	 into  the  file-lists,	 and  thus  it
-	      doesn't  affect  deletions.   It	just limits the	files that the
-	      receiver requests	to be transferred.
-
 
        ----iiggnnoorree--eexxiissttiinngg
               This  tells  rsync  to skip updating files that already exist on
-	      the  destination	(this does _n_o_t ignore existing directories, or
+              the destination (this does _n_o_t ignore  existing  directores,  or
               nothing would get done).  See also ----eexxiissttiinngg.
 
-	      This option is a transfer	rule, not an exclude,  so  it  doesn't
-	      affect  the  data	 that  goes  into  the file-lists, and thus it
-	      doesn't affect deletions.	 It just limits	 the  files  that  the
-	      receiver requests	to be transferred.
-
-	      This  option  can	 be  useful  for those doing backups using the
-	      ----lliinnkk--ddeesstt option when they need	to continue a backup run  that
-	      got  interrupted.	  Since	a ----lliinnkk--ddeesstt run is copied into a new
-	      directory	hierarchy (when	it is used properly),  using  ----iiggnnoorree
-	      eexxiissttiinngg	will  ensure  that the already-handled files don't get
-	      tweaked (which avoids a change in	permissions on the hard-linked
-	      files).	This does mean that this option	is only	looking	at the
-	      existing files in	the destination	hierarchy itself.
-
 
        ----rreemmoovvee--ssoouurrccee--ffiilleess
               This  tells  rsync  to  remove  from  the sending side the files
               (meaning non-directories) that are a part of  the  transfer  and
               have been successfully duplicated on the receiving side.
 
-	      Note that	you should only	use this option	on source  files  that
-	      are quiescent.  If you are using this to move files that show up
-	      in a particular directory	over to	another	host, make  sure  that
-	      the  finished  files  get	renamed	into the source	directory, not
-	      directly written into it,	so that	rsync can't possibly  transfer
-	      a	 file that is not yet fully written.  If you can't first write
-	      the files	into a different directory, you	should	use  a	naming
-	      idiom  that lets rsync avoid transferring	files that are not yet
-	      finished (e.g. name the  file  "foo.new"	when  it  is  written,
-	      rename  it  to  "foo"  when  it is done, and then	use the	option
-	      ----eexxcclluuddee==''**..nneeww''	for the	rsync transfer).
-
-	      Starting with 3.1.0, rsync will  skip  the  sender-side  removal
-	      (and  output an error) if	the file's size	or modify time has not
-	      stayed unchanged.
-
 
        ----ddeelleettee
               This  tells  rsync to delete extraneous files from the receiving
@@ -1627,77 +1104,56 @@ OOPPTTIIOONNSS
               using  a  wildcard  for  the directory's contents (e.g. "dir/*")
               since the wildcard is expanded by the shell and rsync thus  gets
               a  request  to  transfer individual files, not the files' parent
-	      directory.   Files  that are excluded from the transfer are also
+              directory.  Files that  are  excluded  from  transfer  are  also
               excluded from being deleted unless you use the ----ddeelleettee--eexxcclluuddeedd
               option or mark the rules as only matching on  the  sending  side
               (see the include/exclude modifiers in the FILTER RULES section).
 
               Prior to rsync 2.6.7, this option would have  no  effect  unless
-	      ----rreeccuurrssiivvee was enabled.	Beginning with 2.6.7,  deletions  will
-	      also occur when ----ddiirrss (--dd) is enabled, but only for directories
-	      whose contents are being copied.
+              ----rreeccuurrssiivvee was in effect.  Beginning with 2.6.7, deletions will
+              also occur when ----ddiirrss (--dd) is in effect, but only for  directo-
+              ries whose contents are being copied.
 
               This  option can be dangerous if used incorrectly!  It is a very
-	      good  idea to first try a	run using the ----ddrryy--rruunn	option (--nn) to
-	      see what files are going to be deleted.
+              good idea to run first using the ----ddrryy--rruunn option  (--nn)  to  see
+              what  files would be deleted to make sure important files aren't
+              listed.
 
               If the sending side detects any I/O errors, then the deletion of
               any  files  at  the  destination will be automatically disabled.
               This is to prevent temporary filesystem failures  (such  as  NFS
-	      errors)  on  the sending side from causing a massive deletion of
-	      files on the  destination.   You	can  override  this  with  the
+              errors)  on the sending side causing a massive deletion of files
+              on  the  destination.   You   can   override   this   with   the
               ----iiggnnoorree--eerrrroorrss option.
 
               The   ----ddeelleettee   option   may   be  combined  with  one  of  the
               --delete-WHEN   options   without   conflict,   as    well    as
               ----ddeelleettee--eexxcclluuddeedd.    However,  if  none  of  the  --delete-WHEN
-	      options are specified, rsync  will  choose  the  ----ddeelleettee--dduurriinngg
-	      algorithm	 when  talking	to  rsync  3.0.0  or  newer,  and  the
-	      ----ddeelleettee--bbeeffoorree algorithm	when talking to	an older  rsync.   See
-	      also ----ddeelleettee--ddeellaayy and ----ddeelleettee--aafftteerr.
+              options  are  specified,  rsync  will   currently   choose   the
+              ----ddeelleettee--bbeeffoorree  algorithm.  A future version may change this to
+              choose the ----ddeelleettee--dduurriinngg algorithm.  See also  ----ddeelleettee--aafftteerr.
 
 
        ----ddeelleettee--bbeeffoorree
               Request  that  the  file-deletions on the receiving side be done
-	      before the transfer starts.  See ----ddeelleettee	(which is implied) for
-	      more details on file-deletion.
+              before the transfer starts.  This is the default if ----ddeelleettee  or
+              ----ddeelleettee--eexxcclluuddeedd  is specified without one of the --delete-WHEN
+              options.  See ----ddeelleettee (which is implied) for  more  details  on
+              file-deletion.
 
               Deleting  before  the  transfer  is helpful if the filesystem is
               tight for space and removing extraneous files would help to make
               the  transfer  possible.   However,  it  does  introduce a delay
               before the start of the transfer, and this delay might cause the
-	      transfer	to  timeout  (if  ----ttiimmeeoouutt  was  specified).  It also
-	      forces rsync to use the old, non-incremental recursion algorithm
-	      that  requires  rsync to scan all	the files in the transfer into
-	      memory at	once (see ----rreeccuurrssiivvee).
+              transfer to timeout (if ----ttiimmeeoouutt was specified).
 
 
        ----ddeelleettee--dduurriinngg,, ----ddeell
               Request  that  the  file-deletions on the receiving side be done
-	      incrementally as the transfer happens.  The per-directory	delete
-	      scan is done right before	each directory is checked for updates,
-	      so  it  behaves like a more efficient ----ddeelleettee--bbeeffoorree, including
-	      doing the	deletions prior	 to  any  per-directory	 filter	 files
-	      being  updated.	This  option  was first	added in rsync version
-	      2.6.4.  See ----ddeelleettee (which is  implied)	for  more  details  on
-	      file-deletion.
-
-
-       ----ddeelleettee--ddeellaayy
-	      Request  that  the  file-deletions on the	receiving side be com-
-	      puted during  the	 transfer  (like  ----ddeelleettee--dduurriinngg),  and  then
-	      removed  after the transfer completes.  This is useful when com-
-	      bined with ----ddeellaayy--uuppddaatteess and/or	----ffuuzzzzyy, and is	more efficient
-	      than  using  ----ddeelleettee--aafftteerr  (but	 can behave differently, since
-	      ----ddeelleettee--aafftteerr computes the deletions in a separate  pass	 after
-	      all updates are done).  If the number of removed files overflows
-	      an internal buffer, a temporary file  will  be  created  on  the
-	      receiving	 side  to hold the names (it is	removed	while open, so
-	      you shouldn't see	it during the transfer).  If the  creation  of
-	      the  temporary  file fails, rsync	will try to fall back to using
-	      ----ddeelleettee--aafftteerr (which it cannot do if ----rreeccuurrssiivvee	 is  doing  an
-	      incremental  scan).   See	 ----ddeelleettee  (which is implied) for more
-	      details on file-deletion.
+              incrementally as the transfer happens.  This is a faster  method
+              than choosing the before- or after-transfer algorithm, but it is
+              only supported beginning with rsync version 2.6.4.  See ----ddeelleettee
+              (which is implied) for more details on file-deletion.
 
 
        ----ddeelleettee--aafftteerr
@@ -1705,11 +1161,8 @@ OOPPTTIIOONNSS
               after the transfer has completed.  This is  useful  if  you  are
               sending  new per-directory merge files as a part of the transfer
               and you want their exclusions to  take  effect  for  the  delete
-	      phase of the current transfer.  It also forces rsync to use  the
-	      old,  non-incremental recursion algorithm	that requires rsync to
-	      scan all the files in the	transfer  into	memory	at  once  (see
-	      ----rreeccuurrssiivvee).   See ----ddeelleettee (which is implied) for more details
-	      on file-deletion.
+              phase  of the current transfer.  See ----ddeelleettee (which is implied)
+              for more details on file-deletion.
 
 
        ----ddeelleettee--eexxcclluuddeedd
@@ -1722,60 +1175,25 @@ OOPPTTIIOONNSS
               for more details on file-deletion.
 
 
-       ----iiggnnoorree--mmiissssiinngg--aarrggss
-	      When rsync is first processing the explicitly  requested	source
-	      files  (e.g. command-line	arguments or ----ffiilleess--ffrroomm entries), it
-	      is normally an error if the file cannot be found.	  This	option
-	      suppresses  that	error,	and does not try to transfer the file.
-	      This does	not affect subsequent vanished-file errors if  a  file
-	      was  initially found to be present and later is no longer	there.
-
-
-       ----ddeelleettee--mmiissssiinngg--aarrggss
-	      This option takes	the behavior of	(the  implied)	----iiggnnoorree--mmiissss--
-	      iinngg--aarrggss	option a step farther:	each missing arg will become a
-	      deletion request of the corresponding destination	 file  on  the
-	      receiving	 side (should it exist).  If the destination file is a
-	      non-empty	directory, it will only	 be  successfully  deleted  if
-	      --force or --delete are in effect.  Other	than that, this	option
-	      is independent of	any other type of delete processing.
-
-	      The missing source files are represented	by  special  file-list
-	      entries  which  display as a "*missing" entry in the ----lliisstt--oonnllyy
-	      output.
-
-
        ----iiggnnoorree--eerrrroorrss
               Tells ----ddeelleettee to go ahead and delete files even when there  are
               I/O errors.
 
 
-       ----ffoorrccee--ddeelleettee
+       ----ffoorrccee
               This  option tells rsync to delete a non-empty directory when it
               is to be replaced by a non-directory.  This is only relevant  if
               deletions are not active (see ----ddeelleettee for details).
 
-	      This  option can be abbreviated ----ffoorrccee for backward compatibil-
-	      ity.  Note that some older rsync versions	used to	still  require
-	      ----ffoorrccee  when  using ----ddeelleettee--aafftteerr, and it used to be non-func-
-	      tional unless the	----rreeccuurrssiivvee option was also enabled.
+              Note for older rsync versions: ----ffoorrccee used to still be required
+              when using ----ddeelleettee--aafftteerr, and  it  used  to  be  non-functional
+              unless the ----rreeccuurrssiivvee option was also enabled.
 
 
        ----mmaaxx--ddeelleettee==NNUUMM
               This  tells  rsync not to delete more than NUM files or directo-
-	      ries.   If  that	limit  is  exceeded, all further deletions are
-	      skipped through the end of the transfer.	At the end, rsync out-
-	      puts  a warning (including a count of the	skipped	deletions) and
-	      exits with an error code of 25 (unless some more important error
-	      condition	also occurred).
-
-	      Beginning	 with version 3.0.0, you may specify ----mmaaxx--ddeelleettee==00 to
-	      be warned	about any extraneous files in the destination  without
-	      removing any of them.  Older clients interpreted this as "unlim-
-	      ited", so	if you don't know what version the client is, you  can
-	      use  the	less  obvious ----mmaaxx--ddeelleettee==--11 as a backward-compatible
-	      way to specify that no deletions be allowed (though  really  old
-	      versions didn't warn when	the limit was exceeded).
+              ries (NUM must be non-zero).  This is useful when mirroring very
+              large trees to prevent disasters.
 
 
        ----mmaaxx--ssiizzee==SSIIZZEE
@@ -1784,11 +1202,6 @@ OOPPTTIIOONNSS
               string  to  indicate  a size multiplier, and may be a fractional
               value (e.g. "----mmaaxx--ssiizzee==11..55mm").
 
-	      This option is a transfer	rule, not an exclude,  so  it  doesn't
-	      affect  the  data	 that  goes  into  the file-lists, and thus it
-	      doesn't affect deletions.	 It just limits	 the  files  that  the
-	      receiver requests	to be transferred.
-
               The suffixes are as  follows:  "K"  (or  "KiB")  is  a  kibibyte
               (1024),  "M"  (or  "MiB") is a mebibyte (1024*1024), and "G" (or
               "GiB") is a gibibyte (1024*1024*1024).  If you want  the  multi-
@@ -1800,25 +1213,18 @@ OOPPTTIIOONNSS
               Examples:   --max-size=1.5mb-1    is    1499999    bytes,    and
               --max-size=2g+1 is 2147483649 bytes.
 
-	      Note  that  rsync	 versions  prior  to  3.1.0  did   not	 allow
-	      ----mmaaxx--ssiizzee==00.
-
 
        ----mmiinn--ssiizzee==SSIIZZEE
               This  tells rsync to avoid transferring any file that is smaller
               than the specified SIZE, which  can  help  in  not  transferring
               small,  junk files.  See the ----mmaaxx--ssiizzee option for a description
-	      of SIZE and other	information.
-
-	      Note  that  rsync	 versions  prior  to  3.1.0  did   not	 allow
-	      ----mmiinn--ssiizzee==00.
+              of SIZE.
 
 
        --BB,, ----bblloocckk--ssiizzee==BBLLOOCCKKSSIIZZEE
-	      This  forces the block size used in rsync's delta-transfer algo-
-	      rithm to a fixed value.  It is normally selected	based  on  the
-	      size  of	each file being	updated.  See the technical report for
-	      details.
+              This forces the block size used in  the  rsync  algorithm  to  a
+              fixed  value.  It is normally selected based on the size of each
+              file being updated.  See the technical report for details.
 
 
        --ee,, ----rrsshh==CCOOMMMMAANNDD
@@ -1840,11 +1246,11 @@ OOPPTTIIOONNSS
               use  spaces  (not tabs or other whitespace) to separate the com-
               mand and args from each other, and you can  use  single-  and/or
               double-quotes  to  preserve spaces in an argument (but not back-
-	      slashes).	 Note that  doubling  a	 single-quote  inside  a  sin-
-	      gle-quoted  string  gives	 you a single-quote; likewise for dou-
-	      ble-quotes (though you need to pay  attention  to	 which	quotes
-	      your  shell is parsing and which quotes rsync is parsing).  Some
-	      examples:
+              slashes).  Note that doubling a single-quote  inside  a  single-
+              quoted  string  gives  you  a single-quote; likewise for double-
+              quotes (though you need to pay attention to  which  quotes  your
+              shell is parsing and which quotes rsync is parsing).  Some exam-
+              ples:
 
                   -e 'ssh -p 2234'
                   -e 'ssh -o "ProxyCommand nohup ssh firewall nc -w1 %h %p"'
@@ -1875,65 +1281,25 @@ OOPPTTIIOONNSS
               the remote machine for use  with  the  ----rreellaattiivvee  option.   For
               instance:
 
-		  rsync	-avR --rsync-path="cd /a/b && rsync" host:c/d /e/
-
-
-
-       --MM,, ----rreemmoottee--ooppttiioonn==OOPPTTIIOONN
-	      This  option is used for more advanced situations	where you want
-	      certain effects to be limited to one side	of the transfer	 only.
-	      For   instance,	if   you  want	to  pass  ----lloogg--ffiillee==FFIILLEE  and
-	      ----ffaakkee--ssuuppeerr to the remote system, specify it like this:
-
-		  rsync	-av -M --log-file=foo -M--fake-super src/ dest/
-
-
-	      If you want to have an option affect only	the local  side	 of  a
-	      transfer	when it	normally affects both sides, send its negation
-	      to the remote side.  Like	this:
+                  rsync -avR --rsync-path="cd /a/b && rsync" hst:c/d /e/
 
-		  rsync	-av -x -M--no-x	src/ dest/
-
-
-	      Be cautious using	this, as it is possible	to  toggle  an	option
-	      that  will  cause	rsync to have a	different idea about what data
-	      to expect	next over the socket, and that will make it fail in  a
-	      cryptic fashion.
-
-	      Note  that it is best to use a separate ----rreemmoottee--ooppttiioonn for each
-	      option you want to pass.	This makes your	useage compatible with
-	      the ----pprrootteecctt--aarrggss option.  If that option is off, any spaces in
-	      your remote options will be split	by the remote shell unless you
-	      take steps to protect them.
-
-	      When performing a	local transfer,	the "local" side is the	sender
-	      and the "remote" side is the receiver.
-
-	      Note some	versions of the	popt option-parsing library have a bug
-	      in  them	that  prevents	you from using an adjacent arg with an
-	      equal  in	  it   next   to   a   short   option	letter	 (e.g.
-	      -M--log-file=/tmp/foo.   If  this	 bug  affects  your version of
-	      popt, you	can use	the version of	popt  that  is	included  with
-	      rsync.
 
 
        --CC,, ----ccvvss--eexxcclluuddee
               This  is a useful shorthand for excluding a broad range of files
-	      that you often don't want	to transfer between systems. It	uses a
-	      similar  algorithm  to  CVS  to  determine  if  a	file should be
-	      ignored.
+              that you often don't want to transfer between systems.  It  uses
+              the  same  algorithm that CVS uses to determine if a file should
+              be ignored.
 
-	      The exclude list is initialized to exclude the  following	 items
-	      (these  initial items are	marked as perishable --	see the	FILTER
-	      RULES section):
+              The exclude list is initialized to:
 
                      RCS  SCCS  CVS  CVS.adm   RCSLOG   cvslog.*   tags   TAGS
                      .make.state  .nse_depinfo *~ #* .#* ,* _$* *$ *.old *.bak
                      *.BAK *.orig *.rej .del-* *.a *.olb *.o *.obj *.so  *.exe
-		     *.Z *.elc *.ln core .svn/ .git/ .hg/ .bzr/
+                     *.Z *.elc *.ln core .svn/
 
 
-	      then,  files  listed in a	$HOME/.cvsignore are added to the list
+              then  files  listed  in a $HOME/.cvsignore are added to the list
               and any files listed in the CVSIGNORE environment variable  (all
               cvsignore names are delimited by whitespace).
 
@@ -1944,9 +1310,9 @@ OOPPTTIIOONNSS
 
               If you're combining --CC with your own ----ffiilltteerr rules, you  should
               note that these CVS excludes are appended at the end of your own
-	      rules, regardless	of  where  the	--CC  was	 placed	 on  the  com-
-	      mand-line.   This	makes them a lower priority than any rules you
-	      specified	explicitly.  If	you want to control  where  these  CVS
+              rules, regardless of where the --CC was  placed  on  the  command-
+              line.  This makes them a lower priority than any rules you spec-
+              ified explicitly.  If  you  want  to  control  where  these  CVS
               excludes  get  inserted  into your filter rules, you should omit
               the --CC as a command-line option and use a combination of  ----ffiill--
               tteerr==::CC  and  ----ffiilltteerr==--CC  (either  on  your  command-line  or by
@@ -1962,11 +1328,7 @@ OOPPTTIIOONNSS
               most useful in combination with a recursive transfer.
 
               You  may use as many ----ffiilltteerr options on the command line as you
-	      like to build up the list	of files to exclude.   If  the	filter
-	      contains whitespace, be sure to quote it so that the shell gives
-	      the rule to rsync	as a single argument.	The  text  below  also
-	      mentions	that  you  can	use an underscore to replace the space
-	      that separates a rule from its arg.
+              like to build up the list of files to exclude.
 
               See the FILTER RULES section for detailed  information  on  this
               option.
@@ -1996,8 +1358,8 @@ OOPPTTIIOONNSS
 
        ----eexxcclluuddee==PPAATTTTEERRNN
               This option is a simplified form of  the  ----ffiilltteerr  option  that
-	      defaults	to  an	exclude	 rule  and  does  not  allow  the full
-	      rule-parsing syntax of normal filter rules.
+              defaults  to  an  exclude rule and does not allow the full rule-
+              parsing syntax of normal filter rules.
 
               See the FILTER RULES section for detailed  information  on  this
               option.
@@ -2013,8 +1375,8 @@ OOPPTTIIOONNSS
 
        ----iinncclluuddee==PPAATTTTEERRNN
               This  option  is  a  simplified form of the ----ffiilltteerr option that
-	      defaults to  an  include	rule  and  does	 not  allow  the  full
-	      rule-parsing syntax of normal filter rules.
+              defaults to an include rule and does not allow  the  full  rule-
+              parsing syntax of normal filter rules.
 
               See  the  FILTER  RULES section for detailed information on this
               option.
@@ -2050,10 +1412,10 @@ OOPPTTIIOONNSS
                      it.
 
               o      These  side-effects change the default state of rsync, so
-		     the position of  the  ----ffiilleess--ffrroomm	 option	 on  the  com-
-		     mand-line	has no bearing on how other options are	parsed
-		     (e.g. --aa works the	same before or after ----ffiilleess--ffrroomm,  as
-		     does ----nnoo--RR and all other options).
+                     the position of the ----ffiilleess--ffrroomm option on  the  command-
+                     line has no bearing on how other options are parsed (e.g.
+                     --aa works the same before or after ----ffiilleess--ffrroomm,  as  does
+                     ----nnoo--RR and all other options).
 
 
               The  file  names that are read from the FILE are all relative to
@@ -2089,19 +1451,6 @@ OOPPTTIIOONNSS
               This  would  copy all the files specified in the /path/file-list
               file that was located on the remote "src" host.
 
-	      If the ----iiccoonnvv and ----pprrootteecctt--aarrggss	options	are specified and  the
-	      ----ffiilleess--ffrroomm  filenames are being	sent from one host to another,
-	      the filenames will be translated from the	sending	host's charset
-	      to the receiving host's charset.
-
-	      NOTE:  sorting the list of files in the --files-from input helps
-	      rsync to be more efficient, as it	 will  avoid  re-visiting  the
-	      path  elements that are shared between adjacent entries.	If the
-	      input is not sorted, some	path  elements	(implied  directories)
-	      may  end up being	scanned	multiple times,	and rsync will eventu-
-	      ally unduplicate them after they get turned into file-list  ele-
-	      ments.
-
 
        --00,, ----ffrroomm00
               This tells rsync that the rules/filenames it reads from  a  file
@@ -2112,48 +1461,17 @@ OOPPTTIIOONNSS
               .cvsignore file are split on whitespace).
 
 
-       --ss,, ----pprrootteecctt--aarrggss
-	      This option sends	all filenames and most options to  the	remote
-	      rsync without allowing the remote	shell to interpret them.  This
-	      means that spaces	are not	split in names,	and  any  non-wildcard
-	      special  characters  are	not  translated	 (such	as ~, $, ;, &,
-	      etc.).  Wildcards	are expanded  on  the  remote  host  by	 rsync
-	      (instead of the shell doing it).
-
-	      If  you  use  this  option with ----iiccoonnvv, the args	related	to the
-	      remote side will also be translated from the local to the	remote
-	      character-set.   The  translation	 happens before	wild-cards are
-	      expanded.	 See also the ----ffiilleess--ffrroomm option.
-
-	      You may also control  this  option  via  the  RSYNC_PROTECT_ARGS
-	      environment  variable.   If  this	variable has a non-zero	value,
-	      this option will be enabled by default,  otherwise  it  will  be
-	      disabled	by  default.  Either state is overridden by a manually
-	      specified	positive or negative version of	this option (note that
-	      ----nnoo--ss  and ----nnoo--pprrootteecctt--aarrggss are	the negative versions).	 Since
-	      this option was first introduced in 3.0.0, you'll	need  to  make
-	      sure  it's  disabled  if you ever	need to	interact with a	remote
-	      rsync that is older than that.
-
-	      Rsync can	also be	configured (at build time) to have this	option
-	      enabled  by  default (with is overridden by both the environment
-	      and the command-line).  This option will eventually become a new
-	      default setting at some as-yet-undetermined point	in the future.
-
-
        --TT,, ----tteemmpp--ddiirr==DDIIRR
               This  option  instructs  rsync to use DIR as a scratch directory
               when creating temporary copies of the files transferred  on  the
               receiving  side.   The default behavior is to create each tempo-
               rary file in the same directory as  the  associated  destination
-	      file.  Beginning with rsync 3.1.1, the  temp-file	 names	inside
-	      the specified DIR	will not be prefixed with an extra dot (though
-	      they will	still have a random suffix added).
+              file.
 
               This option is most often used when the receiving disk partition
               does not have enough free space to hold a copy  of  the  largest
               file  in  the  transfer.   In  this  case (i.e. when the scratch
-	      directory	 is  on	a different disk partition), rsync will	not be
+              directory in on a different disk partition), rsync will  not  be
               able  to rename each received temporary file over the top of the
               associated destination file,  but  instead  must  copy  it  into
               place.   Rsync does this by copying the file over the top of the
@@ -2190,10 +1508,6 @@ OOPPTTIIOONNSS
               larly-named file.  If found, rsync uses the fuzzy basis file  to
               try to speed up the transfer.
 
-	      If the option is repeated, the fuzzy scan	will also be  done  in
-	      any  matching  alternate destination directories that are	speci-
-	      fied via ----ccoommppaarree--ddeesstt, ----ccooppyy--ddeesstt, or ----lliinnkk--ddeesstt.
-
               Note  that  the  use of the ----ddeelleettee option might get rid of any
               potential fuzzy-match files, so  either  use  ----ddeelleettee--aafftteerr  or
               specify some filename exclusions if you need to prevent this.
@@ -2207,8 +1521,6 @@ OOPPTTIIOONNSS
               to  the  sender's  file, the file will NOT be transferred to the
               destination directory.  This is useful  for  creating  a  sparse
               backup of just files that have changed from an earlier backup.
-	      This  option  is	typically used to copy into an empty (or newly
-	      created) directory.
 
               Beginning  in version 2.6.4, multiple ----ccoommppaarree--ddeesstt directories
               may be provided, which will cause rsync to search  the  list  in
@@ -2221,11 +1533,6 @@ OOPPTTIIOONNSS
               If  _D_I_R  is  a  relative path, it is relative to the destination
               directory.  See also ----ccooppyy--ddeesstt and ----lliinnkk--ddeesstt.
 
-	      NOTE:  beginning	with  version  3.1.0, rsync will remove	a file
-	      from a non-empty destination hierarchy  if  an  exact  match  is
-	      found  in	 one  of  the compare-dest hierarchies (making the end
-	      result more closely match	a fresh	copy).
-
 
        ----ccooppyy--ddeesstt==DDIIRR
               This option behaves like ----ccoommppaarree--ddeesstt,  but  rsync  will  also
@@ -2254,12 +1561,6 @@ OOPPTTIIOONNSS
                 rsync -av --link-dest=$PWD/prior_dir host:src_dir/ new_dir/
 
 
-	      If  file's  aren't linking, double-check their attributes.  Also
-	      check if some attributes are getting forced outside  of  rsync's
-	      control,	such  a	 mount	option	that squishes root to a	single
-	      user, or mounts a	removable drive	with generic  ownership	 (such
-	      as OS X's	"Ignore	ownership on this volume" option).
-
               Beginning in version 2.6.4, multiple ----lliinnkk--ddeesstt directories may
               be provided, which will cause rsync to search the  list  in  the
               order  specified  for  an exact match.  If a match is found that
@@ -2268,14 +1569,6 @@ OOPPTTIIOONNSS
               one of the _D_I_Rs will be selected to try to speed up  the  trans-
               fer.
 
-	      This  option  works  best	when copying into an empty destination
-	      hierarchy, as existing files may get their  attributes  tweaked,
-	      and  that	can affect alternate destination files via hard-links.
-	      Also, itemizing of changes can get a  bit	 muddled.   Note  that
-	      prior to version 3.1.0, an alternate-directory exact match would
-	      never be found (nor linked into the destination) when a destina-
-	      tion file	already	exists.
-
               Note  that if you combine this option with ----iiggnnoorree--ttiimmeess, rsync
               will not link any files together because it only links identical
               files  together as a substitute for transferring the file, never
@@ -2300,25 +1593,7 @@ OOPPTTIIOONNSS
               ratios  than can be achieved by using a compressing remote shell
               or a compressing transport because it  takes  advantage  of  the
               implicit  information  in  the matching data blocks that are not
-	      explicitly sent over the connection.   This  matching-data  com-
-	      pression	comes at a cost	of CPU,	though,	and can	be disabled by
-	      repeating	the --zz option, but only	if both	 sides	are  at	 least
-	      version 3.1.1.
-
-	      Note that	if your	version	of rsync was compiled with an external
-	      zlib (instead of the zlib	that comes packaged with  rsync)  then
-	      it   will	 not  support  the  old-style  compression,  only  the
-	      new-style	(repeated-option) compression.	 In  the  future  this
-	      new-style	compression will likely	become the default.
-
-	      The  client  rsync  requests new-style compression on the	server
-	      via the  ----nneeww--ccoommpprreessss  option,	so  if	you  see  that	option
-	      rejected	it  means that the server is not new enough to support
-	      --zzzz.  Rsync also accepts the ----oolldd--ccoommpprreessss option for a	future
-	      time when	new-style compression becomes the default.
-
-	      See the ----sskkiipp--ccoommpprreessss option for the default list of file suf-
-	      fixes that will not be compressed.
+              explicitly sent over the connection.
 
 
        ----ccoommpprreessss--lleevveell==NNUUMM
@@ -2327,40 +1602,6 @@ OOPPTTIIOONNSS
               pprreessss option is implied.
 
 
-       ----sskkiipp--ccoommpprreessss==LLIISSTT
-	      Override the list	of file	suffixes that will not be  compressed.
-	      The  LLIISSTT	 should	be one or more file suffixes (without the dot)
-	      separated	by slashes (/).
-
-	      You may specify an empty string to indicate that no file	should
-	      be skipped.
-
-	      Simple  character-class matching is supported: each must consist
-	      of a list	of letters inside the square brackets (e.g. no special
-	      classes, such as "[:alpha:]", are	supported, and '-' has no spe-
-	      cial meaning).
-
-	      The characters asterisk (*) and question-mark (?)	have  no  spe-
-	      cial meaning.
-
-	      Here's  an example that specifies	6 suffixes to skip (since 1 of
-	      the 5 rules matches 2 suffixes):
-
-		  --skip-compress=gz/jpg/mp[34]/7z/bz2
-
-
-	      The default list of suffixes that	will not be compressed is this
-	      (in this version of rsync):
-
-	      77zz  aaccee  aavvii bbzz22 ddeebb ggppgg ggzz iissoo jjppeegg jjppgg llzz llzzmmaa llzzoo mmoovv mmpp33 mmpp44
-	      oogggg ppnngg rraarr rrppmm rrzziipp ttbbzz ttggzz ttllzz ttxxzz xxzz zz	zziipp
-
-	      This list	will be	replaced by your ----sskkiipp--ccoommpprreessss list  in  all
-	      but  one	situation:  a  copy  from a daemon rsync will add your
-	      skipped suffixes to its list of non-compressing files  (and  its
-	      list may be configured to	a different default).
-
-
        ----nnuummeerriicc--iiddss
               With this option rsync will transfer numeric group and user  IDs
               rather  than using user and group names and mapping them at both
@@ -2379,79 +1620,12 @@ OOPPTTIIOONNSS
               names of the users and groups and what you can do about it.
 
 
-       ----uusseerrmmaapp==SSTTRRIINNGG,, ----ggrroouuppmmaapp==SSTTRRIINNGG
-	      These  options allow you to specify users	and groups that	should
-	      be mapped	to other values	by the receiving side.	The SSTTRRIINNGG  is
-	      one  or  more  FFRROOMM:TTOO pairs of values separated by commas.  Any
-	      matching FFRROOMM value from the sender is replaced with a TTOO	 value
-	      from  the	 receiver.   You may specify usernames or user IDs for
-	      the FFRROOMM and TTOO values,  and  the	 FFRROOMM  value  may  also	 be  a
-	      wild-card	 string,  which	 will  be matched against the sender's
-	      names (wild-cards	do NOT match against ID	 numbers,  though  see
-	      below  for why a '*' matches everything).	 You may instead spec-
-	      ify a range of ID	numbers	via an inclusive range:	LOW-HIGH.  For
-	      example:
-
-		--usermap=0-99:nobody,wayne:admin,*:normal --groupmap=usr:1,1:usr
-
-
-	      The first	match in the list is the one that is used.  You	should
-	      specify all your user mappings using a single ----uusseerrmmaapp  option,
-	      and/or all your group mappings using a single ----ggrroouuppmmaapp option.
-
-	      Note that	the sender's name for the 0 user  and  group  are  not
-	      transmitted  to  the  receiver, so you should either match these
-	      values using a 0,	or use the names in effect  on	the  receiving
-	      side  (typically	"root").   All other FFRROOMM names	match those in
-	      use on the sending side.	All TTOO names match those in use	on the
-	      receiving	side.
-
-	      Any  IDs that do not have	a name on the sending side are treated
-	      as having	an empty name  for  the	 purpose  of  matching.	  This
-	      allows them to be	matched	via a "*" or using an empty name.  For
-	      instance:
-
-		--usermap=:nobody --groupmap=*:nobody
-
-
-	      When the ----nnuummeerriicc--iiddss option is used, the sender	does not  send
-	      any  names,  so all the IDs are treated as having	an empty name.
-	      This means that you will need to specify numeric FFRROOMM values  if
-	      you want to map these nameless IDs to different values.
-
-	      For  the	----uusseerrmmaapp  option to have any effect, the --oo (----oowwnneerr)
-	      option must be used (or implied),	and the	receiver will need  to
-	      be  running  as a	super-user (see	also the ----ffaakkee--ssuuppeerr option).
-	      For the ----ggrroouuppmmaapp option	to have	any effect, the	--gg  (----ggrroouuppss)
-	      option  must be used (or implied), and the receiver will need to
-	      have permissions to set that group.
-
-
-       ----cchhoowwnn==UUSSEERR::GGRROOUUPP
-	      This option forces all files to be  owned	 by  USER  with	 group
-	      GROUP.   This  is	 a  simpler interface than using ----uusseerrmmaapp and
-	      ----ggrroouuppmmaapp directly, but it is implemented using	those  options
-	      internally, so you cannot	mix them.  If either the USER or GROUP
-	      is empty,	no mapping for the omitted user/group will occur.   If
-	      GROUP  is	 empty,	the trailing colon may be omitted, but if USER
-	      is empty,	a leading colon	must be	supplied.
-
-	      If you specify "--chown=foo:bar, this is	exactly	 the  same  as
-	      specifying "--usermap=*:foo --groupmap=*:bar", only easier.
-
-
        ----ttiimmeeoouutt==TTIIMMEEOOUUTT
               This option allows you to set a maximum I/O timeout in  seconds.
               If no data is transferred for the specified time then rsync will
               exit. The default is 0, which means no timeout.
 
 
-       ----ccoonnttiimmeeoouutt
-	      This option allows you to	set the	amount of time that rsync will
-	      wait for its connection to an rsync daemon to succeed.   If  the
-	      timeout is reached, rsync	exits with an error.
-
-
        ----aaddddrreessss
               By default rsync will bind to the wildcard address when connect-
               ing  to  an  rsync  daemon.   The ----aaddddrreessss option allows you to
@@ -2486,16 +1660,6 @@ OOPPTTIIOONNSS
               I/O.)
 
 
-       ----oouuttbbuuff==MMOODDEE
-	      This  sets the output buffering mode.  The mode can be None (aka
-	      Unbuffered), Line, or Block (aka Full).  You may specify as lit-
-	      tle  as  a  single  letter  for the mode,	and use	upper or lower
-	      case.
-
-	      The main use of this option is to	change Full buffering to  Line
-	      buffering	when rsync's output is going to	a file or pipe.
-
-
        --ii,, ----iitteemmiizzee--cchhaannggeess
               Requests a simple itemized list of the changes  that  are  being
               made to each file, including attribute changes.  This is exactly
@@ -2505,8 +1669,8 @@ OOPPTTIIOONNSS
               older  versions  of  rsync, but that also turns on the output of
               other verbose messages).
 
-	      The  "%i"	 escape	 has a cryptic output that is 11 letters long.
-	      The general format is like the string YYXXccssttppooggffaaxx,  where	 YY  is
+              The "%i" escape has a cryptic output that  is  9  letters  long.
+              The  general  format  is  like  the string YYXXccssttppooggzz, where YY is
               replaced by the type of update being done, XX is replaced by  the
               file-type,  and  the other letters represent attributes that may
               be output if they are being modified.
@@ -2530,9 +1694,6 @@ OOPPTTIIOONNSS
               o      A  ..  means that the item is not being updated (though it
                      might have attributes that are being modified).
 
-	      o	     A	** means	that the rest of the itemized-output area con-
-		     tains a message (e.g. "deleting").
-
 
               The file-types that replace the XX are: ff for a file, a dd  for  a
               directory,  an  LL for a symlink, a DD for a device, and a SS for a
@@ -2549,25 +1710,18 @@ OOPPTTIIOONNSS
               The attribute that is associated with each letter is as follows:
 
 
-	      o	     A	cc  means  either  that	a regular file has a different
-		     checksum (requires	----cchheecckkssuumm) or that a symlink, device,
-		     or	 special  file	has a changed value.  Note that	if you
-		     are sending files to an rsync prior to 3.0.1, this	change
-		     flag  will	be present only	for checksum-differing regular
-		     files.
+              o      A  cc means the checksum of the file is different and will
+                     be updated by the file transfer (requires ----cchheecckkssuumm).
 
-	      o	     A ss means the size	of a regular  file  is	different  and
-		     will be updated by	the file transfer.
+              o      A ss means the size of the file is different and  will  be
+                     updated by the file transfer.
 
               o      A tt means the modification time is different and is being
                      updated to the sender's  value  (requires  ----ttiimmeess).   An
-		     alternate	value  of  TT  means that the modification time
-		     will be set to the	transfer time, which  happens  when  a
-		     file/symlink/device is updated without ----ttiimmeess and	when a
-		     symlink is	changed	and the	receiver can't set  its	 time.
-		     (Note:  when  using  an rsync 3.0.0 client, you might see
-		     the ss flag	combined with tt	instead	of the proper  TT  flag
-		     for this time-setting failure.)
+                     alternate  value  of TT means that the time will be set to
+                     the transfer time, which happens  anytime  a  symlink  is
+                     transferred,  or  when  a  file  or device is transferred
+                     without ----ttiimmeess.
 
               o      A pp means the permissions are  different  and  are  being
                      updated to the sender's value (requires ----ppeerrmmss).
@@ -2580,12 +1734,7 @@ OOPPTTIIOONNSS
                      the sender's value (requires ----ggrroouupp and the authority to
                      set the group).
 
-	      o	     The ff means that the fileflags information	changed.
-
-	      o	     The aa means that the ACL information changed.
-
-	      o	     The xx  means  that	 the  extended	attribute  information
-		     changed.
+              o      The zz slot is reserved for future use.
 
 
               One  other  output  is  possible:  when deleting files, the "%i"
@@ -2599,21 +1748,22 @@ OOPPTTIIOONNSS
               This allows you to specify exactly what the rsync client outputs
               to the user on a per-update basis.  The format is a text  string
               containing  embedded  single-character escape sequences prefixed
-	      with a percent (%) character.   A	default	format	of  "%n%L"  is
-	      assumed if either	----iinnffoo==nnaammee or --vv is specified (this tells you
-	      just the name of the file	and, if	the item is a link,  where  it
-	      points).	For a full list	of the possible	escape characters, see
-	      the "log format" setting in the rsyncd.conf manpage.
+              with a percent (%) character.  For a list of the possible escape
+              characters, see the "log format" setting in the rsyncd.conf man-
+              page.
 
-	      Specifying  the  ----oouutt--ffoorrmmaatt  option  implies  the  ----iinnffoo==nnaammee
-	      option,  which  will  mention  each  file,  dir,	etc. that gets
-	      updated in a significant way (a transferred  file,  a  recreated
-	      symlink/device,  or  a  touched directory).  In addition,	if the
-	      itemize-changes escape (%i) is included in the string  (e.g.  if
-	      the  ----iitteemmiizzee--cchhaannggeess  option  was  used), the logging of names
-	      increases	to mention any item that is changed  in	 any  way  (as
-	      long  as the receiving side is at	least 2.6.4).  See the ----iitteemm--
-	      iizzee--cchhaannggeess option for a description of the output of "%i".
+              Specifying this option will mention each file,  dir,  etc.  that
+              gets  updated in a significant way (a transferred file, a recre-
+              ated symlink/device, or a touched directory).  In  addition,  if
+              the  itemize-changes  escape (%i) is included in the string, the
+              logging of names increases to mention any item that  is  changed
+              in  any  way  (as long as the receiving side is at least 2.6.4).
+              See the ----iitteemmiizzee--cchhaannggeess option for a description of the output
+              of "%i".
+
+              The ----vveerrbboossee option implies a format of "%n%L", but you can use
+              ----oouutt--ffoorrmmaatt without ----vveerrbboossee if you like, or you can  override
+              the format of its per-file output using this option.
 
               Rsync will output the out-format string prior to a file's trans-
               fer unless one of the transfer-statistic escapes  is  requested,
@@ -2627,15 +1777,15 @@ OOPPTTIIOONNSS
        ----lloogg--ffiillee==FFIILLEE
               This  option  causes  rsync  to  log what it is doing to a file.
               This is similar to the logging that a daemon does,  but  can  be
-	      requested	for the	client	side  and/or  the  server  side	 of  a
-	      non-daemon  transfer.  If	specified as a client option, transfer
-	      logging will be enabled with a default format of "%i %n%L".  See
+              requested  for  the client side and/or the server side of a non-
+              daemon transfer.  If specified as a client option, transfer log-
+              ging  will  be  enabled with a default format of "%i %n%L".  See
               the ----lloogg--ffiillee--ffoorrmmaatt option if you wish to override this.
 
               Here's a example command that requests the remote  side  to  log
               what is happening:
 
-		rsync -av --remote-option=--log-file=/tmp/rlog src/ dest/
+                rsync -av --rsync-path="rsync --log-file=/tmp/rlog" src/ dest/
 
 
               This  is  very  useful  if you need to debug why a connection is
@@ -2650,45 +1800,21 @@ OOPPTTIIOONNSS
               the log file.  For a list of the possible escape characters, see
               the "log format" setting in the rsyncd.conf manpage.
 
-	      The default FORMAT used if  ----lloogg--ffiillee  is  specified  and  this
-	      option is	not is '%i %n%L'.
-
 
        ----ssttaattss
               This  tells  rsync  to  print a verbose set of statistics on the
-	      file transfer,  allowing	you  to	 tell  how  effective  rsync's
-	      delta-transfer  algorithm	 is  for  your	data.	This option is
-	      equivalent to ----iinnffoo==ssttaattss22 if combined with 0 or	1 --vv  options,
-	      or ----iinnffoo==ssttaattss33 if combined with	2 or more --vv options.
+              file transfer, allowing you to  tell  how  effective  the  rsync
+              algorithm is for your data.
 
               The current statistics are as follows:
 
               o      NNuummbbeerr  ooff  ffiilleess  is  the  count  of all "files" (in the
                      generic sense),  which  includes  directories,  symlinks,
-		     etc.   The	 total	count  will  be	 followed by a list of
-		     counts by filetype	(if the	total is non-zero).  For exam-
-		     ple:  "(reg:  5,  dir:  3,	 link: 2, dev: 1, special: 1)"
-		     lists the totals for  regular  files,  directories,  sym-
-		     links, devices, and special files.	 If any	of value is 0,
-		     it	is completely omitted from the list.
-
-	      o	     NNuummbbeerr ooff ccrreeaatteedd ffiilleess is	the count of how many  "files"
-		     (generic  sense)  were  created  (as opposed to updated).
-		     The total count will be followed by a list	of  counts  by
-		     filetype (if the total is non-zero).
-
-	      o	     NNuummbbeerr  ooff	ddeelleetteedd	ffiilleess is the count of how many "files"
-		     (generic sense) were created  (as	opposed	 to  updated).
-		     The  total	 count will be followed	by a list of counts by
-		     filetype (if the total is non-zero).  Note	that this line
-		     is	 only  output  if deletions are	in effect, and only if
-		     protocol 31 is being used (the default for	rsync  3.1.x).
-
-	      o	     NNuummbbeerr  ooff	rreegguullaarr	ffiilleess ttrraannssffeerrrreedd is the count of nor-
-		     mal files that were updated  via  rsync's	delta-transfer
-		     algorithm,	 which	does  not include dirs,	symlinks, etc.
-		     Note that rsync 3.1.0 added the word "regular" into  this
-		     heading.
+                     etc.
+
+              o      NNuummbbeerr  ooff ffiilleess ttrraannssffeerrrreedd is the count of normal files
+                     that were updated via the rsync algorithm, which does not
+                     include created dirs, symlinks, etc.
 
               o      TToottaall ffiillee ssiizzee is the total sum of all file sizes in the
                      transfer.  This does not count any size  for  directories
@@ -2742,29 +1868,11 @@ OOPPTTIIOONNSS
 
 
        --hh,, ----hhuummaann--rreeaaddaabbllee
-	      Output numbers in	a more human-readable  format.	 There	are  3
-	      possible	levels:	  (1)  output numbers with a separator between
-	      each set of 3 digits (either a comma or a	period,	 depending  on
-	      if the decimal point is represented by a period or a comma); (2)
-	      output numbers in	units of 1000 (with  a	character  suffix  for
-	      larger units -- see below); (3) output numbers in	units of 1024.
-
-	      The default is human-readable level 1.  Each --hh option increases
-	      the  level  by one.  You can take	the level down to 0 (to	output
-	      numbers as pure digits)  by  specifing  the  ----nnoo--hhuummaann--rreeaaddaabbllee
-	      (----nnoo--hh) option.
-
-	      The  unit	 letters  that	are  appended in levels	2 and 3	are: K
-	      (kilo), M	(mega),	 G  (giga),  or	 T  (tera).   For  example,  a
-	      1234567-byte  file  would	 output	 as 1.23M in level-2 (assuming
-	      that a period is your local decimal point).
-
-	      Backward compatibility note:  versions of	rsync prior  to	 3.1.0
-	      do not support human-readable level 1, and they default to level
-	      0.  Thus,	specifying one or two --hh options will behave in	a com-
-	      parable  manner  in  old	and new	versions as long as you	didn't
-	      specify a	----nnoo--hh option prior to one or more  --hh	options.   See
-	      the ----lliisstt--oonnllyy option for one difference.
+              Output numbers in a more human-readable format.  This makes  big
+              numbers output using larger units, with a K, M, or G suffix.  If
+              this option was specified once, these  units  are  K  (1000),  M
+              (1000*1000),  and G (1000*1000*1000); if the option is repeated,
+              the units are powers of 1024 instead of 1000.
 
 
        ----ppaarrttiiaall
@@ -2786,7 +1894,7 @@ OOPPTTIIOONNSS
               Note that if ----wwhhoollee--ffiillee is specified (or  implied),  any  par-
               tial-dir  file  that  is  found for a file that is being updated
               will simply be removed (since rsync  is  sending  files  without
-	      using rsync's delta-transfer algorithm).
+              using the incremental rsync algorithm).
 
               Rsync will create the _D_I_R if it is missing (just the last dir --
               not the whole path).  This makes it easy to use a relative  path
@@ -2800,8 +1908,9 @@ OOPPTTIIOONNSS
               will prevent the sending of any partial-dir files that may exist
               on the sending side, and will also prevent the untimely deletion
               of partial-dir items on the receiving  side.   An  example:  the
-	      above ----ppaarrttiiaall--ddiirr option would add the equivalent of  "--ff  ''--pp
-	      ..rrssyynncc--ppaarrttiiaall//''"	at the end of any other	filter rules.
+              above   ----ppaarrttiiaall--ddiirr   option   would  add  the  equivalent  of
+              "----eexxcclluuddee==..rrssyynncc--ppaarrttiiaall//" at  the  end  of  any  other  filter
+              rules.
 
               If you are supplying your own exclude rules, you may need to add
               your own exclude/hide/protect rule for the  partial-dir  because
@@ -2847,7 +1956,7 @@ OOPPTTIIOONNSS
               the ----ppaarrttiiaall--ddiirr option, that directory will be  used  instead.
               See  the  comments in the ----ppaarrttiiaall--ddiirr section for a discussion
               of how this ".~tmp~" dir will be excluded from the transfer, and
-	      what  you	 can do	if you want rsync to cleanup old ".~tmp~" dirs
+              what  you  can do if you wnat rsync to cleanup old ".~tmp~" dirs
               that might  be  lying  around.   Conflicts  with  ----iinnppllaaccee  and
               ----aappppeenndd.
 
@@ -2875,17 +1984,11 @@ OOPPTTIIOONNSS
               rsync  is  recursively  scanning  a  hierarchy  of  files  using
               include/exclude/filter rules.
 
-	      Note  that  the  use  of	transfer rules,	such as	the ----mmiinn--ssiizzee
-	      option, does not affect what goes	into the file list,  and  thus
-	      does not leave directories empty,	even if	none of	the files in a
-	      directory	match the transfer rule.
-
               Because the file-list is actually being pruned, this option also
               affects what directories get deleted when a  delete  is  active.
               However,  keep  in  mind that excluded files and directories can
-	      prevent existing items from being	deleted	due to an exclude both
-	      hiding source files and protecting destination files.   See  the
-	      perishable filter-rule option for	how to avoid this.
+              prevent existing items from being deleted  (because  an  exclude
+              hides source files and protects destination files).
 
               You  can  prevent  the pruning of certain empty directories from
               the file-list by using a global "protect" filter.  For instance,
@@ -2905,7 +2008,7 @@ OOPPTTIIOONNSS
 
 
               If you didn't want to remove superfluous destination files,  the
-	      more  time-honored  options  of  "----iinncclluuddee==''**//''	----eexxcclluuddee==''**''"
+              more  time-honored  options  of  "--include='*/'  --exclude='*'"
               would work fine in place of the hide-filter  (if  that  is  more
               natural to you).
 
@@ -2913,10 +2016,7 @@ OOPPTTIIOONNSS
        ----pprrooggrreessss
               This  option  tells  rsync  to  print  information  showing  the
               progress of the transfer. This gives a bored user  something  to
-	      watch.   With  a	modern	rsync  this  is	the same as specifying
-	      ----iinnffoo==fflliisstt22,,nnaammee,,pprrooggrreessss, but any user-supplied settings  for
-	      those   info   flags   takes   precedence	 (e.g.	"--info=flist0
-	      --progress").
+              watch.  Implies ----vveerrbboossee if it wasn't already specified.
 
               While  rsync  is  transferring  a  regular  file,  it  updates a
               progress line that looks like this:
@@ -2929,7 +2029,7 @@ OOPPTTIIOONNSS
               of 110.64 kilobytes per second, and the transfer will finish  in
               4 seconds if the current rate is maintained until the end.
 
-	      These statistics can be  misleading  if  rsync's	delta-transfer
+              These  statistics  can be misleading if the incremental transfer
               algorithm is in use.  For example, if the sender's file consists
               of the basis file followed by additional data, the reported rate
               will probably drop dramatically when the receiver  gets  to  the
@@ -2940,10 +2040,10 @@ OOPPTTIIOONNSS
               When  the  file  transfer  finishes, rsync replaces the progress
               line with a summary line that looks like this:
 
-		    1,238,099 100%  146.38kB/s	  0:00:08  (xfr#5, to-chk=169/396)
+                   1238099 100%  146.38kB/s    0:00:08  (xfer#5, to-check=169/396)
 
 
-	      In this example, the file	was 1,238,099 bytes long in total, the
+              In this example, the file was 1238099 bytes long in  total,  the
               average rate of transfer for the whole file was 146.38 kilobytes
               per second over the 8 seconds that it took to complete,  it  was
               the 5th transfer of a regular file during the current rsync ses-
@@ -2951,46 +2051,19 @@ OOPPTTIIOONNSS
               see  if  they  are  up-to-date  or not) remaining out of the 396
               total files in the file-list.
 
-	      In  an  incremental  recursion  scan, rsync won't	know the total
-	      number of	files in the file-list until it	reaches	 the  ends  of
-	      the scan,	but since it starts to transfer	files during the scan,
-	      it will display a	line with the text "ir-chk"  (for  incremental
-	      recursion	 check)	 instead  of  "to-chk" until the point that it
-	      knows the	full size of the list, at which	point it  will	switch
-	      to using "to-chk".  Thus,	seeing "ir-chk"	lets you know that the
-	      total count of files in the file list is still going to increase
-	      (and  each  time it does,	the count of files left	to check  will
-	      increase by the number of	the files added	to the list).
-
 
        --PP     The --PP option is equivalent to ----ppaarrttiiaall ----pprrooggrreessss.   Its  pur-
               pose  is to make it much easier to specify these two options for
               a long transfer that may be interrupted.
 
-	      There is also a ----iinnffoo==pprrooggrreessss22 option that outputs  statistics
-	      based  on	the whole transfer, rather than	individual files.  Use
-	      this flag	without	outputting a filename (e.g. avoid --vv or	 spec-
-	      ify  ----iinnffoo==nnaammee00	 if  you want to see how the transfer is doing
-	      without scrolling	the screen with	a lot of  names.   (You	 don't
-	      need   to	  specify  the	----pprrooggrreessss  option  in	order  to  use
-	      ----iinnffoo==pprrooggrreessss22.)
-
 
-       ----ppaasssswwoorrdd--ffiillee==FFIILLEE
-	      This option allows you to	provide	a password  for	 accessing  an
-	      rsync daemon via a file or via standard input if FFIILLEE is --.  The
-	      file should contain just the password on	the  first  line  (all
-	      other lines are ignored).	 Rsync will exit with an error if FFIILLEE
-	      is world readable	 or  if	 a  root-run  rsync  command  finds  a
-	      non-root-owned file.
-
-	      This  option does	not supply a password to a remote shell	trans-
-	      port such	as ssh;	to learn how to	do that,  consult  the	remote
-	      shell's  documentation.	When accessing an rsync	daemon using a
-	      remote shell as the  transport,  this  option  only  comes  into
-	      effect  after the	remote shell finishes its authentication (i.e.
-	      if you have also specified a password  in	 the  daemon's	config
-	      file).
+       ----ppaasssswwoorrdd--ffiillee
+              This option allows you to provide  a  password  in  a  file  for
+              accessing  a  remote rsync daemon. Note that this option is only
+              useful when accessing an rsync daemon using the built in  trans-
+              port,  not  when using a remote shell as the transport. The file
+              must not be world readable. It should contain just the  password
+              as a single line.
 
 
        ----lliisstt--oonnllyy
@@ -2998,59 +2071,28 @@ OOPPTTIIOONNSS
               transferred.  This option is  inferred  if  there  is  a  single
               source  arg  and no destination specified, so its main uses are:
               (1) to turn a copy command that includes a destination arg  into
-	      a	 file-listing  command,	or (2) to be able to specify more than
-	      one source arg (note: be sure to include the destination).  Cau-
-	      tion:  keep  in  mind  that  a  source  arg  with	a wild-card is
-	      expanded by the shell into multiple args,	so it is never safe to
-	      try to list such an arg without using this option.  For example:
+              a  file-listing command, (2) to be able to specify more than one
+              local source arg (note: be sure to include the destination),  or
+              (3)  to  avoid  the  automatically  added  "--rr ----eexxcclluuddee==''//**//**''"
+              options that rsync usually uses as a  compatibility  kluge  when
+              generating  a non-recursive listing.  Caution: keep in mind that
+              a source arg with a wild-card is expanded by the shell into mul-
+              tiple args, so it is never safe to try to list such an arg with-
+              out using this option.  For example:
 
                   rsync -av --list-only foo* dest/
 
 
-	      Starting with rsync 3.1.0, the sizes output by  ----lliisstt--oonnllyy  are
-	      affected	by  the	----hhuummaann--rreeaaddaabbllee option.  By default they will
-	      contain digit separators,	but higher levels of readability  will
-	      output  the sizes	with unit suffixes.  Note also that the	column
-	      width for	the size output	has increased from 11 to 14 characters
-	      for all human-readable levels.  Use ----nnoo--hh if you	want just dig-
-	      its in the sizes,	and the	old column width of 11 characters.
-
-	      Compatibility note:  when	requesting a remote listing  of	 files
-	      from  an rsync that is version 2.6.3 or older, you may encounter
-	      an error if you  ask  for	 a  non-recursive  listing.   This  is
-	      because  a  file	listing	implies	the ----ddiirrss option w/o ----rreeccuurr--
-	      ssiivvee, and	older rsyncs don't have	that option.   To  avoid  this
-	      problem,	either specify the ----nnoo--ddiirrss option (if	you don't need
-	      to expand	a directory's  content),  or  turn  on	recursion  and
-	      exclude the content of subdirectories: --rr	----eexxcclluuddee==''//**//**''.
-
-
-       ----bbwwlliimmiitt==RRAATTEE
-	      This  option allows you to specify the maximum transfer rate for
-	      the data sent over the socket, specified in  units  per  second.
-	      The  RATE	value can be suffixed with a string to indicate	a size
-	      multiplier,   and	  may	be   a	  fractional	value	 (e.g.
-	      "----bbwwlliimmiitt==11..55mm").  If no	suffix is specified, the value will be
-	      assumed to be in units of	1024 bytes (as if  "K"	or  "KiB"  had
-	      been  appended).	See the	----mmaaxx--ssiizzee option for a	description of
-	      all the available	suffixes. A value of zero specifies no	limit.
-
-	      For  backward-compatibility  reasons,  the  rate	limit  will be
-	      rounded to the nearest KiB unit, so no rate  smaller  than  1024
-	      bytes per	second is possible.
-
-	      Rsync  writes  data  over	 the socket in blocks, and this	option
-	      both limits the size of the blocks that rsync writes, and	 tries
-	      to  keep the average transfer rate at the	requested limit.  Some
-	      "burstiness" may be seen where rsync writes out a	block of  data
-	      and then sleeps to bring the average rate	into compliance.
-
-	      Due to the internal buffering of data, the ----pprrooggrreessss option may
-	      not be an	accurate reflection on how  fast  the  data  is	 being
-	      sent.   This  is because some files can show up as being rapidly
-	      sent when	the data is quickly buffered, while other can show  up
-	      as  very	slow  when  the	 flushing of the output	buffer occurs.
-	      This may be fixed	in a future version.
+
+       ----bbwwlliimmiitt==KKBBPPSS
+              This option allows you to specify a  maximum  transfer  rate  in
+              kilobytes  per  second. This option is most effective when using
+              rsync with large files (several megabytes and up).  Due  to  the
+              nature  of  rsync  transfers,  blocks  of data are sent, then if
+              rsync determines the transfer was too fast, it will wait  before
+              sending  the  next data block. The result is an average transfer
+              rate equaling the specified limit. A value of zero specifies  no
+              limit.
 
 
        ----wwrriittee--bbaattcchh==FFIILLEE
@@ -3097,62 +2139,33 @@ OOPPTTIIOONNSS
               on the reading system).
 
 
-       ----iiccoonnvv==CCOONNVVEERRTT__SSPPEECC
-	      Rsync can	convert	filenames between character  sets  using  this
-	      option.	Using a	CONVERT_SPEC of	"." tells rsync	to look	up the
-	      default character-set via	the locale setting.  Alternately,  you
-	      can  fully specify what conversion to do by giving a local and a
-	      remote   charset	 separated   by	  a   comma   in   the	 order
-	      ----iiccoonnvv==LLOOCCAALL,,RREEMMOOTTEE,  e.g.   ----iiccoonnvv==uuttff88,,iissoo8888559911.  This order
-	      ensures that the option will stay	the same whether you're	 push-
-	      ing   or	 pulling  files.   Finally,  you  can  specify	either
-	      ----nnoo--iiccoonnvv or a CONVERT_SPEC of "-" to turn off any  conversion.
-	      The  default  setting  of	 this option is	site-specific, and can
-	      also be affected via the RSYNC_ICONV environment variable.
-
-	      For a list of what charset names your local iconv	 library  sup-
-	      ports, you can run "iconv	--list".
-
-	      If you specify the ----pprrootteecctt--aarrggss	option (--ss), rsync will	trans-
-	      late the filenames you specify  on  the  command-line  that  are
-	      being  sent  to  the  remote  host.   See	 also the ----ffiilleess--ffrroomm
-	      option.
-
-	      Note that	rsync does not do any conversion of  names  in	filter
-	      files  (including	 include/exclude  files).   It is up to	you to
-	      ensure that you're specifying matching rules that	can  match  on
-	      both sides of the	transfer.  For instance, you can specify extra
-	      include/exclude rules if there are filename differences  on  the
-	      two sides	that need to be	accounted for.
-
-	      When  you	 pass an ----iiccoonnvv option	to an rsync daemon that	allows
-	      it, the daemon uses the charset specified	in its "charset"  con-
-	      figuration  parameter regardless of the remote charset you actu-
-	      ally pass.  Thus,	you may	feel free to specify  just  the	 local
-	      charset for a daemon transfer (e.g. ----iiccoonnvv==uuttff88).
-
-
        --44,, ----iippvv44 or --66,, ----iippvv66
               Tells  rsync  to  prefer  IPv4/IPv6 when creating sockets.  This
               only affects sockets that rsync has direct control over, such as
               the  outgoing  socket  when directly contacting an rsync daemon.
               See also these options in the ----ddaaeemmoonn mode section.
 
-	      If rsync was complied  without  support  for  IPv6,  the	----iippvv66
-	      option  will have	no effect.  The	----vveerrssiioonn output will tell you
-	      if this is the case.
-
 
        ----cchheecckkssuumm--sseeeedd==NNUUMM
-	      Set the checksum seed to the integer NUM.	 This 4	byte  checksum
-	      seed is included in each block and MD4 file checksum calculation
-	      (the more	modern MD5 file	 checksums  don't  use	a  seed).   By
-	      default  the  checksum  seed  is	generated  by  the  server and
-	      defaults to the current time() .	This option is used to	set  a
-	      specific	checksum  seed,	 which is useful for applications that
-	      want repeatable block checksums, or in the case where  the  user
-	      wants  a	more  random  checksum	seed.  Setting NUM to 0	causes
-	      rsync to use the default of time() for checksum seed.
+              Set the MD4 checksum seed to  the  integer  NUM.   This  4  byte
+              checksum  seed  is  included in each block and file MD4 checksum
+              calculation.  By default the checksum seed is generated  by  the
+              server and defaults to the current time() .  This option is used
+              to set a specific checksum seed, which is  useful  for  applica-
+              tions  that  want repeatable block and file checksums, or in the
+              case where the user wants a more  random  checksum  seed.   Note
+              that  setting NUM to 0 causes rsync to use the default of time()
+              for checksum seed.
+
+       --EE,, ----eexxtteennddeedd--aattttrriibbuutteess
+              Apple specific option  to  copy  extended  attributes,  resource
+              forks,  and  ACLs.   Requires at least Mac OS X 10.4 or suitably
+              patched rsync.
+
+       ----ccaacchhee
+              Apple specific option to enable filesystem caching of rsync file
+              i/o Otherwise fcntl(F_NOCACHE) is used to limit memory growth.
+
 
 
 DDAAEEMMOONN OOPPTTIIOONNSS
@@ -3181,32 +2194,21 @@ DDAAEEMMOONN OOPPTTIIOONNSS
               rsyncd.conf manpage.
 
 
-       ----bbwwlliimmiitt==RRAATTEE
-	      This option allows you to	specify	the maximum transfer rate  for
-	      the data the daemon sends	over the socket.  The client can still
-	      specify a	smaller	----bbwwlliimmiitt value, but no	larger value  will  be
-	      allowed.	See the	client version of this option (above) for some
-	      extra details.
+       ----bbwwlliimmiitt==KKBBPPSS
+              This  option  allows  you  to specify a maximum transfer rate in
+              kilobytes per second for the data the daemon sends.  The  client
+              can still specify a smaller ----bbwwlliimmiitt value, but their requested
+              value will be rounded down if they try to exceed  it.   See  the
+              client version of this option (above) for some extra details.
 
 
        ----ccoonnffiigg==FFIILLEE
               This  specifies an alternate config file than the default.  This
               is only relevant when ----ddaaeemmoonn is  specified.   The  default  is
-	      /usr/local/etc/rsync/rsyncd.conf unless the  daemon  is  running
-	      over  a  remote  shell  program  and  the	remote user is not the
-	      super-user; in that case the default is rsyncd.conf in the  cur-
-	      rent directory (typically	$HOME).
-
-
-       --MM,, ----ddppaarraamm==OOVVEERRRRIIDDEE
-	      This  option  can	 be used to set	a daemon-config	parameter when
-	      starting up rsync	in daemon mode.	 It is	equivalent  to	adding
-	      the  parameter  at  the  end of the global settings prior	to the
-	      first module's definition.  The parameter	names can be specified
-	      without spaces, if you so	desire.	 For instance:
-
-		  rsync	--daemon -M pidfile=/path/rsync.pid
-
+              /etc/rsyncd.conf  unless  the  daemon  is  running over a remote
+              shell program and the remote user is not the super-user; in that
+              case  the default is rsyncd.conf in the current directory (typi-
+              cally $HOME).
 
 
        ----nnoo--ddeettaacchh
@@ -3258,10 +2260,6 @@ DDAAEEMMOONN OOPPTTIIOONNSS
               already in use" error when nothing else is using the  port,  try
               specifying ----iippvv66 or ----iippvv44 when starting the daemon).
 
-	      If rsync was complied  without  support  for  IPv6,  the	----iippvv66
-	      option  will have	no effect.  The	----vveerrssiioonn output will tell you
-	      if this is the case.
-
 
        --hh,, ----hheellpp
               When  specified after ----ddaaeemmoonn, print a short help page describ-
@@ -3337,26 +2335,28 @@ IINNCCLLUUDDEE//EEXXCCLLUUDDEE	PPAATTTTEERRNN	RRUULLEE
        o      if the pattern starts with a / then it is anchored to a particu-
               lar  spot  in  the  hierarchy  of files, otherwise it is matched
               against the end of the pathname.  This is similar to a leading ^
-	      in regular expressions.  Thus "/foo" would match a name of "foo"
-	      at  either  the "root of the transfer" (for a global rule) or in
-	      the merge-file's	directory  (for	 a  per-directory  rule).   An
-	      unqualified  "foo"  would	 match a name of "foo" anywhere	in the
-	      tree because the algorithm is applied recursively	from  the  top
-	      down;  it	behaves	as if each path	component gets a turn at being
-	      the end of the filename.	Even the  unanchored  "sub/foo"	 would
-	      match  at	 any  point  in	 the hierarchy where a "foo" was found
-	      within a directory named "sub".  See the	section	 on  ANCHORING
-	      INCLUDE/EXCLUDE PATTERNS for a full discussion of	how to specify
-	      a	pattern	that matches at	the root of the	transfer.
+              in  regular  expressions.   Thus "/foo" would match a file named
+              "foo" at either the "root of the transfer" (for a  global  rule)
+              or in the merge-file's directory (for a per-directory rule).  An
+              unqualified "foo" would match any file or directory named  "foo"
+              anywhere  in  the  tree  because the algorithm is applied recur-
+              sively from the top down; it behaves as if each  path  component
+              gets  a  turn at being the end of the file name.  Even the unan-
+              chored "sub/foo" would match at any point in the hierarchy where
+              a  "foo" was found within a directory named "sub".  See the sec-
+              tion on ANCHORING INCLUDE/EXCLUDE PATTERNS for a full discussion
+              of  how  to  specify  a  pattern that matches at the root of the
+              transfer.
 
        o      if the pattern ends with a / then it will only  match  a  direc-
-	      tory, not	a regular file,	symlink, or device.
+              tory, not a file, link, or device.
 
        o      rsync  chooses  between doing a simple string match and wildcard
               matching by checking if the pattern contains one of these  three
               wildcard characters: '*', '?', and '[' .
 
-       o      a	'*' matches any	path component,	but it stops at	slashes.
+       o      a  '*'  matches  any  non-empty  path  component  (it  stops  at
+              slashes).
 
        o      use '**' to match anything, including slashes.
 
@@ -3367,11 +2367,7 @@ IINNCCLLUUDDEE//EEXXCCLLUUDDEE	PPAATTTTEERRNN	RRUULLEE
 
        o      in a wildcard pattern, a backslash can be used to escape a wild-
               card character, but it is matched literally  when  no  wildcards
-	      are present.  This means that there is an	extra level  of	 back-
-	      slash  removal  when a pattern contains wildcard characters com-
-	      pared to a pattern that has none.	 e.g. if you add a wildcard to
-	      "foo\bar"	 (which	 matches  the backslash) you would need	to use
-	      "foo\\bar*" to avoid the "\b" becoming just "b".
+              are present.
 
        o      if  the  pattern  contains  a / (not counting a trailing /) or a
               "**", then it is matched against the  full  pathname,  including
@@ -3382,22 +2378,22 @@ IINNCCLLUUDDEE//EEXXCCLLUUDDEE	PPAATTTTEERRNN	RRUULLEE
               the starting directory on down.)
 
        o      a  trailing  "dir_name/***" will match both the directory (as if
-	      "dir_name/"  had been specified) and everything in the directory
-	      (as if "dir_name/**" had been  specified).   This	 behavior  was
-	      added in version 2.6.7.
+              "dir_name/" had been specified) and all the files in the  direc-
+              tory  (as  if "dir_name/**" had been specified).  (This behavior
+              is new for version 2.6.7.)
 
 
        Note that, when using the ----rreeccuurrssiivvee (--rr) option (which is implied  by
        --aa),  every subcomponent of every path is visited from the top down, so
        include/exclude patterns get applied recursively to each subcomponent's
        full  name (e.g. to include "/foo/bar/baz" the subcomponents "/foo" and
-       "/foo/bar"  must	 not  be  excluded).   The  exclude  patterns actually
-       short-circuit the directory traversal stage when	rsync finds the	 files
-       to  send.   If a	pattern	excludes a particular parent directory,	it can
-       render a	deeper include	pattern	 ineffectual  because  rsync  did  not
-       descend	through	 that excluded section of the hierarchy.  This is par-
-       ticularly important when	using a	trailing '*' rule.  For	instance, this
-       won't work:
+       "/foo/bar" must not be excluded).  The exclude patterns actually short-
+       circuit  the  directory  traversal  stage when rsync finds the files to
+       send.  If a pattern excludes a particular parent directory, it can ren-
+       der  a deeper include pattern ineffectual because rsync did not descend
+       through that excluded section of the hierarchy.  This  is  particularly
+       important  when  using  a  trailing '*' rule.  For instance, this won't
+       work:
 
               + /some/path/this-file-will-not-be-found
               + /file-is-included
@@ -3423,7 +2419,7 @@ IINNCCLLUUDDEE//EEXXCCLLUUDDEE	PPAATTTTEERRNN	RRUULLEE
        Here are some examples of exclude/include matching:
 
 
-       o      "- *.o" would exclude all	names matching *.o
+       o      "- *.o" would exclude all filenames matching *.o
 
        o      "-  /foo"  would  exclude a file (or directory) named foo in the
               transfer-root directory
@@ -3447,69 +2443,28 @@ IINNCCLLUUDDEE//EEXXCCLLUUDDEE	PPAATTTTEERRNN	RRUULLEE
               must be explicitly included or it would be excluded by the "*")
 
 
-       The following modifiers are accepted after a "+"	or "-":
-
-
-       o      A	 //  specifies  that the	include/exclude	rule should be matched
-	      against the absolute pathname of the current item.  For example,
-	      "-/  /usr/local/etc/rsync/passwd"	 would exclude the passwd file
-	      any time the transfer was	sending	files from the	"/etc"	direc-
-	      tory,  and "-/ subdir/foo" would always exclude "foo" when it is
-	      in a dir named "subdir", even if "foo" is	at  the	 root  of  the
-	      current transfer.
-
-       o      A	!! specifies that the include/exclude should take effect	if the
-	      pattern fails to match.  For instance, "-! */" would exclude all
-	      non-directories.
-
-       o      A	 CC  is	used to	indicate that all the global CVS-exclude rules
-	      should be	inserted as excludes in	place of  the  "-C".   No  arg
-	      should follow.
-
-       o      An  ss  is	 used to indicate that the rule	applies	to the sending
-	      side.  When a rule affects the sending side, it  prevents	 files
-	      from  being  transferred.	  The  default is for a	rule to	affect
-	      both sides unless	----ddeelleettee--eexxcclluuddeedd was specified, in which case
-	      default  rules  become  sender-side only.	 See also the hide (H)
-	      and show (S) rules, which	are an alternate way to	specify	 send-
-	      ing-side includes/excludes.
-
-       o      An  rr is used to indicate	that the rule applies to the receiving
-	      side.  When a rule affects the receiving side, it	prevents files
-	      from being deleted.  See the ss modifier for more info.  See also
-	      the protect (P) and risk (R) rules, which	are an	alternate  way
-	      to specify receiver-side includes/excludes.
-
-       o      A	 pp  indicates  that  a	rule is	perishable, meaning that it is
-	      ignored in directories that are being  deleted.	For  instance,
-	      the --CC option's default rules that exclude things	like "CVS" and
-	      "*.o" are	marked as perishable, and will not prevent a directory
-	      that  was	removed	on the source from being deleted on the	desti-
-	      nation.
-
-
 
 MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
        You can merge whole files into your filter rules by specifying either a
        merge  (.)  or a dir-merge (:) filter rule (as introduced in the FILTER
        RULES section above).
 
-       There are two kinds  of	merged	files  --  single-instance  ('.')  and
-       per-directory  (':').   A  single-instance merge	file is	read one time,
-       and its rules are incorporated into the filter list in the place	of the
-       "."  rule.  For per-directory merge files, rsync	will scan every	direc-
-       tory that it traverses for the named file, merging  its	contents  when
-       the  file  exists  into	the  current  list  of inherited rules.	 These
-       per-directory rule files	must be	created	on the sending side because it
-       is  the	sending	 side that is being scanned for	the available files to
-       transfer.  These	rule files may also need  to  be  transferred  to  the
-       receiving  side if you want them	to affect what files don't get deleted
-       (see PER-DIRECTORY RULES	AND DELETE below).
+       There are two kinds of merged files -- single-instance ('.')  and  per-
+       directory  (':').   A  single-instance merge file is read one time, and
+       its rules are incorporated into the filter list in the place of the "."
+       rule.   For  per-directory merge files, rsync will scan every directory
+       that it traverses for the named file, merging  its  contents  when  the
+       file exists into the current list of inherited rules.  These per-direc-
+       tory rule files must be created on the sending side because it  is  the
+       sending side that is being scanned for the available files to transfer.
+       These rule files may also need to be transferred to the receiving  side
+       if you want them to affect what files don't get deleted (see PER-DIREC-
+       TORY RULES AND DELETE below).
 
        Some examples:
 
-	      merge /usr/local/etc/rsync/rsync/default.rules
-	      .	/usr/local/etc/rsync/rsync/default.rules
+              merge /etc/rsync/default.rules
+              . /etc/rsync/default.rules
               dir-merge .per-dir-filter
               dir-merge,n- .non-inherited-per-dir-excludes
               :n- .non-inherited-per-dir-excludes
@@ -3524,10 +2479,10 @@ MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
        o      A  ++ specifies that the file should consist of only include pat-
               terns, with no other rule-parsing except for in-file comments.
 
-       o      A	CC is a way to specify that  the	 file  should  be  read	 in  a
-	      CVS-compatible  manner.	This  turns  on	'n', 'w', and '-', but
-	      also allows the list-clearing token (!) to be specified.	If  no
-	      filename is provided, ".cvsignore" is assumed.
+       o      A CC is a way to specify that the file should be read in  a  CVS-
+              compatible  manner.   This  turns on 'n', 'w', and '-', but also
+              allows the list-clearing token (!) to be specified.  If no file-
+              name is provided, ".cvsignore" is assumed.
 
        o      A  ee  will  exclude  the merge-file name from the transfer; e.g.
               "dir-merge,e .rules" is like "dir-merge .rules" and "-  .rules".
@@ -3542,15 +2497,45 @@ MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
               (assuming that prefix-parsing wasn't also disabled).
 
        o      You may also specify any of the modifiers for  the  "+"  or  "-"
-	      rules  (above)  in order to have the rules that are read in from
-	      the file default to having that modifier set (except for	the  !!
-	      modifier,	 which	would not be useful).  For instance, "merge,-/
-	      .excl" would  treat  the	contents  of  .excl  as	 absolute-path
-	      excludes,	 while	"dir-merge,s  .filt" and ":sC" would each make
-	      all their	per-directory rules apply only on  the	sending	 side.
-	      If the merge rule	specifies sides	to affect (via the ss or	rr mod-
-	      ifier or both), then the rules in	 the  file  must  not  specify
-	      sides (via a modifier or a rule prefix such as hhiiddee).
+              rules  (below)  in order to have the rules that are read in from
+              the file default to having that  modifier  set.   For  instance,
+              "merge,-/  .excl" would treat the contents of .excl as absolute-
+              path excludes, while "dir-merge,s .filt" and  ":sC"  would  each
+              make  all  their  per-directory  rules apply only on the sending
+              side.
+
+
+       The following modifiers are accepted after a "+" or "-":
+
+
+       o      A "/" specifies that the include/exclude rule should be  matched
+              against the absolute pathname of the current item.  For example,
+              "-/ /etc/passwd" would exclude the  passwd  file  any  time  the
+              transfer  was  sending  files from the "/etc" directory, and "-/
+              subdir/foo" would always exclude "foo" when it is in a dir named
+              "subdir",  even if "foo" is at the root of the current transfer.
+
+       o      A "!" specifies that the include/exclude should take  effect  if
+              the pattern fails to match.  For instance, "-! */" would exclude
+              all non-directories.
+
+       o      A CC is used to indicate that all the  global  CVS-exclude  rules
+              should  be  inserted  as  excludes in place of the "-C".  No arg
+              should follow.
+
+       o      An ss is used to indicate that the rule applies  to  the  sending
+              side.   When  a rule affects the sending side, it prevents files
+              from being transferred.  The default is for  a  rule  to  affect
+              both sides unless ----ddeelleettee--eexxcclluuddeedd was specified, in which case
+              default rules become sender-side only.  See also  the  hide  (H)
+              and  show (S) rules, which are an alternate way to specify send-
+              ing-side includes/excludes.
+
+       o      An rr is used to indicate that the rule applies to the  receiving
+              side.  When a rule affects the receiving side, it prevents files
+              from being deleted.  See the ss modifier for more info.  See also
+              the  protect  (P) and risk (R) rules, which are an alternate way
+              to specify receiver-side includes/excludes.
 
 
        Per-directory rules are inherited in all subdirectories of  the  direc-
@@ -3581,8 +2566,8 @@ MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
 
 
        This will merge the contents of the /home/user/.global-filter  file  at
-       the start of the	list and also  turns  the  ".rules"  filename  into  a
-       per-directory filter file.  All rules read in prior to the start	of the
+       the  start of the list and also turns the ".rules" filename into a per-
+       directory filter file.  All rules read in prior to  the  start  of  the
        directory  scan follow the global anchoring rules (i.e. a leading slash
        matches at the root of the transfer).
 
@@ -3617,12 +2602,12 @@ MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
        If you want to include the contents of a ".cvsignore" in your patterns,
        you  should use the rule ":C", which creates a dir-merge of the .cvsig-
        nore file, but parsed in a CVS-compatible manner.  You can use this  to
-       affect  where  the  ----ccvvss--eexxcclluuddee  (--CC)	option's  inclusion   of   the
-       per-directory  .cvsignore  file	gets placed into your rules by putting
-       the ":C"	wherever you like in your filter rules.	 Without  this,	 rsync
-       would  add the dir-merge	rule for the .cvsignore	file at	the end	of all
-       your other rules	(giving	it a lower  priority  than  your  command-line
-       rules).	For example:
+       affect  where  the  ----ccvvss--eexxcclluuddee  (--CC)  option's inclusion of the per-
+       directory .cvsignore file gets placed into your rules  by  putting  the
+       ":C" wherever you like in your filter rules.  Without this, rsync would
+       add the dir-merge rule for the .cvsignore file at the end of  all  your
+       other  rules (giving it a lower priority than your command-line rules).
+       For example:
 
               cat <<EOT | rsync -avC --filter='. -' a/ b
               + foo.o
@@ -3639,7 +2624,7 @@ MMEERRGGEE--FFIILLEE FFIILLTTEERR RRUULLEESS
        rules.  To affect the other CVS exclude rules (i.e. the default list of
        exclusions,  the contents of $HOME/.cvsignore, and the value of $CVSIG-
        NORE) you should omit the --CC command-line option and instead  insert  a
-       "-C" rule into your filter rules; e.g. "----ffiilltteerr==--CC".
+       "-C" rule into your filter rules; e.g. "--filter=-C".
 
 
 LLIISSTT--CCLLEEAARRIINNGG FFIILLTTEERR RRUULLEE
@@ -3764,26 +2749,25 @@ BBAATTCCHH MMOODDEE
        "batch file" all  the  information  needed  to  repeat  this  operation
        against other, identical destination trees.
 
-       Generating the batch file once saves having to perform the file status,
-       checksum, and data block	generation more	than once when updating	multi-
-       ple destination trees. Multicast	transport protocols  can  be  used  to
-       transfer	 the  batch  update  files  in parallel	to many	hosts at once,
-       instead of sending the same data	to every host individually.
-
        To  apply  the  recorded changes to another destination tree, run rsync
        with the read-batch option, specifying the name of the same batch file,
        and the destination tree.  Rsync updates the destination tree using the
        information stored in the batch file.
 
-       For   your  convenience,	 a  script  file  is  also  created  when  the
-       write-batch option is used:  it will be named the  same	as  the	 batch
-       file  with  ".sh"  appended.   This script file contains	a command-line
-       suitable	for updating a destination tree	 using	the  associated	 batch
-       file. It	can be executed	using a	Bourne (or Bourne-like)	shell, option-
-       ally passing in an alternate destination	tree pathname  which  is  then
-       used instead of the original destination	path.  This is useful when the
-       destination tree	path on	the current host differs from the one used  to
-       create the batch	file.
+       For convenience, one additional file is creating when  the  write-batch
+       option  is used.  This file's name is created by appending ".sh" to the
+       batch filename.  The .sh file  contains  a  command-line  suitable  for
+       updating  a  destination tree using that batch file. It can be executed
+       using a Bourne (or Bourne-like) shell, optionally passing in an  alter-
+       nate destination tree pathname which is then used instead of the origi-
+       nal path. This is useful when the destination tree  path  differs  from
+       the original destination tree path.
+
+       Generating the batch file once saves having to perform the file status,
+       checksum, and data block generation more than once when updating multi-
+       ple  destination  trees.  Multicast  transport protocols can be used to
+       transfer the batch update files in parallel  to  many  hosts  at  once,
+       instead of sending the same data to every host individually.
 
        Examples:
 
@@ -3830,22 +2814,21 @@ BBAATTCCHH MMOODDEE
        is encountered the update might be discarded with  a  warning  (if  the
        file  appears  to  be  up-to-date  already)  or  the file-update may be
        attempted and then, if the file fails to verify, the  update  discarded
-       with  an	 error.	  This	means  that  it	 should	 be  safe  to re-run a
-       read-batch operation if the command got interrupted.  If	 you  wish  to
-       force  the  batched-update  to  always  be  attempted regardless	of the
-       file's size and date, use the --II	option (when reading the  batch).   If
-       an  error  occurs, the destination tree will probably be	in a partially
-       updated state.  In  that	 case,	rsync  can  be	used  in  its  regular
-       (non-batch) mode	of operation to	fix up the destination tree.
+       with  an  error.   This  means that it should be safe to re-run a read-
+       batch operation if the command got interrupted.  If you wish  to  force
+       the batched-update to always be attempted regardless of the file's size
+       and date, use the --II option (when reading  the  batch).   If  an  error
+       occurs,  the  destination  tree will probably be in a partially updated
+       state. In that case, rsync can be used in its regular (non-batch)  mode
+       of operation to fix up the destination tree.
 
        The  rsync  version used on all destinations must be at least as new as
        the one used to generate the batch file.  Rsync will die with an  error
-       if  the	protocol  version  in  the  batch  file	 is  too  new  for the
-       batch-reading rsync to handle.  See also	the ----pprroottooccooll	option	for  a
-       way  to	have  the  creating  rsync generate a batch file that an older
-       rsync can understand.  (Note that batch files changed format in version
-       2.6.3,  so mixing versions older	than that with newer versions will not
-       work.)
+       if  the  protocol  version  in the batch file is too new for the batch-
+       reading rsync to handle.  See also the ----pprroottooccooll option for a  way  to
+       have  the  creating rsync generate a batch file that an older rsync can
+       understand.  (Note that batch files changed format in version 2.6.3, so
+       mixing versions older than that with newer versions will not work.)
 
        When  reading  a  batch  file,  rsync  will  force the value of certain
        options to match the data in the batch file if you didn't set  them  to
@@ -3879,17 +2862,17 @@ SSYYMMBBOOLLIICC LLIINNKKSS
        If ----ccooppyy--lliinnkkss is specified, then symlinks are "collapsed" by  copying
        their referent, rather than the symlink.
 
-       Rsync can also distinguish "safe"  and  "unsafe"	 symbolic  links.   An
-       example	where  this  might be used is a	web site mirror	that wishes to
-       ensure that the rsync module that is copied does	not  include  symbolic
-       links to	//uussrr//llooccaall//eettcc//rrssyynncc//ppaasssswwdd in the public section of the site.
-       Using ----ccooppyy--uunnssaaffee--lliinnkkss will cause any	links to be copied as the file
-       they point to on	the destination.  Using	----ssaaffee--lliinnkkss will cause	unsafe
+       rsync  also distinguishes "safe" and "unsafe" symbolic links.  An exam-
+       ple where this might be used is a web site mirror  that  wishes  ensure
+       the  rsync  module  they  copy  does  not  include  symbolic  links  to
+       //eettcc//ppaasssswwdd   in   the   public   section   of   the    site.     Using
+       ----ccooppyy--uunnssaaffee--lliinnkkss  will cause any links to be copied as the file they
+       point to on the destination.   Using  ----ssaaffee--lliinnkkss  will  cause  unsafe
        links  to  be  omitted altogether.  (Note that you must specify ----lliinnkkss
        for ----ssaaffee--lliinnkkss to have any effect.)
 
        Symbolic links are considered unsafe  if  they  are  absolute  symlinks
-       (start with //), empty, or if they contain  enough  ".."	components  to
+       (start  with  //),  empty, or if they contain enough ""....""  components to
        ascend from the directory being copied.
 
        Here's a summary of how the symlink options are interpreted.  The  list
@@ -3938,8 +2921,8 @@ DDIIAAGGNNOOSSTTIICCSS
        rsync then you will probably find that out.dat contains  some  text  or
        data.  Look  at  the contents and try to work out what is producing it.
        The most common cause is incorrectly configured shell  startup  scripts
-       (such as	 .cshrc	 or  .profile)	that  contain  output  statements  for
-       non-interactive logins.
+       (such  as  .cshrc  or .profile) that contain output statements for non-
+       interactive logins.
 
        If you are having trouble debugging filter patterns, then try  specify-
        ing  the  --vvvv  option.   At this level of verbosity rsync will show why
@@ -3988,8 +2971,6 @@ EEXXIITT VVAALLUUEESS
 
        3300     Timeout in data send/receive
 
-       3355     Timeout waiting for daemon connection
-
 
 
 EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
@@ -3998,15 +2979,6 @@ EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
               terns in .cvsignore files. See the ----ccvvss--eexxcclluuddee option for more
               details.
 
-       RRSSYYNNCC__IICCOONNVV
-	      Specify a	default	----iiccoonnvv	setting	using this  environment	 vari-
-	      able. (First supported in	3.0.0.)
-
-       RRSSYYNNCC__PPRROOTTEECCTT__AARRGGSS
-	      Specify  a non-zero numeric value	if you want the	----pprrootteecctt--aarrggss
-	      option to	be enabled by default, or a zero value	to  make  sure
-	      that it is disabled by default. (First supported in 3.1.0.)
-
        RRSSYYNNCC__RRSSHH
               The  RSYNC_RSH  environment  variable allows you to override the
               default shell used as the transport  for  rsync.   Command  line
@@ -4022,8 +2994,7 @@ EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
               Setting RSYNC_PASSWORD to the required password  allows  you  to
               run  authenticated  rsync connections to an rsync daemon without
               user intervention. Note that this does not supply a password  to
-	      a	 remote	 shell transport such as ssh; to learn how to do that,
-	      consult the remote shell's documentation.
+              a shell transport such as ssh.
 
        UUSSEERR or LLOOGGNNAAMMEE
               The  USER or LOGNAME environment variables are used to determine
@@ -4036,11 +3007,11 @@ EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
 
 
 FFIILLEESS
-       /usr/local/etc/rsync/rsyncd.conf	or rsyncd.conf
+       /etc/rsyncd.conf or rsyncd.conf
 
 
 SSEEEE AALLSSOO
-       rrssyynnccdd..ccoonnff(5)
+       rrssyynnccdd..ccoonnff(5) ffccnnttll(2)
 
 
 BBUUGGSS
@@ -4058,7 +3029,7 @@ BBUUGGSS
 
 
 VVEERRSSIIOONN
-       This man	page is	current	for version 3.1.1 of rsync.
+       This man page is current for version 2.6.9 of rsync.
 
 
 IINNTTEERRNNAALL OOPPTTIIOONNSS
@@ -4072,8 +3043,8 @@ IINNTTEERRNNAALL OOPPTTIIOONNSS
 
 
 CCRREEDDIITTSS
-       rsync  is  distributed  under  the GNU General Public License.  See the
-       file COPYING for	details.
+       rsync is distributed under the GNU public license.  See the file  COPY-
+       ING for details.
 
        A  WEB site is available at http://rsync.samba.org/.  The site includes
        an FAQ-O-Matic which may cover  questions  unanswered  by  this  manual
@@ -4082,30 +3053,27 @@ CCRREEDDIITTSS
        The primary ftp site for rsync is ftp://rsync.samba.org/pub/rsync.
 
        We would be delighted to hear from you if you like this program.
-       Please contact the mailing-list at rsync@lists.samba.org.
 
        This  program  uses  the  excellent zlib compression library written by
        Jean-loup Gailly and Mark Adler.
 
 
 TTHHAANNKKSS
-       Special thanks go out to: John Van Essen,  Matt	McCutchen,  Wesley  W.
-       Terpstra,  David	 Dykstra,  Jos Backus, Sebastian Krahmer, Martin Pool,
-       and our gone-but-not-forgotten compadre,	J.W. Schultz.
+       Thanks to Richard Brent, Brendan Mackay, Bill Waite,  Stephen  Rothwell
+       and  David  Bell for helpful suggestions, patches and testing of rsync.
+       I've probably missed some people, my apologies if I have.
 
-       Thanks also to Richard Brent, Brendan Mackay, Bill Waite, Stephen Roth-
-       well and	David Bell.  I've probably missed some people, my apologies if
-       I have.
+       Especial thanks also to: David Dykstra, Jos Backus, Sebastian  Krahmer,
+       Martin Pool, Wayne Davison, J.W. Schultz.
 
 
 AAUUTTHHOORR
        rsync  was  originally  written  by Andrew Tridgell and Paul Mackerras.
-       Many  people  have later	contributed to it.  It is currently maintained
-       by Wayne	Davison.
+       Many people have later contributed to it.
 
        Mailing  lists  for  support   and   development   are   available   at
        http://lists.samba.org
 
 
 
-				  22 Jun 2014			      rsync(1)
+                                  6 Nov 2006                          rsync(1)
